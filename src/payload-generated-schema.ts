/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
	pgTable,
	index,
	uniqueIndex,
	foreignKey,
	integer,
	varchar,
	boolean,
	text,
	jsonb,
	numeric,
	serial,
	timestamp,
	type AnyPgColumn,
	pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
	'reference',
	'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
	'enum_pages_hero_links_link_appearance',
	['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
	'enum_pages_blocks_archive_populate_by',
	['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
	'enum_pages_blocks_archive_relation_to',
	['posts'],
)
export const enum_pages_blocks_banner_style = pgEnum('enum_pages_blocks_banner_style', [
	'info',
	'warning',
	'error',
	'success',
])
export const enum_pages_blocks_cta_center_button_link_type = pgEnum(
	'enum_pages_blocks_cta_center_button_link_type',
	['reference', 'custom'],
)
export const enum_pages_blocks_cta_left_button_link_type = pgEnum(
	'enum_pages_blocks_cta_left_button_link_type',
	['reference', 'custom'],
)
export const enum_pages_blocks_cta_right_button_link_type = pgEnum(
	'enum_pages_blocks_cta_right_button_link_type',
	['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
	'enum_pages_blocks_content_columns_size',
	['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_font = pgEnum(
	'enum_pages_blocks_content_columns_font',
	['default', 'serif', 'sans-serif', 'monospace'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
	'enum_pages_blocks_content_columns_link_type',
	['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
	'enum_pages_blocks_content_columns_link_appearance',
	['default', 'outline'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
	'none',
	'highImpact',
	'mediumImpact',
	'lowImpact',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
	'enum__pages_v_version_hero_links_link_type',
	['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
	'enum__pages_v_version_hero_links_link_appearance',
	['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
	'enum__pages_v_blocks_archive_populate_by',
	['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
	'enum__pages_v_blocks_archive_relation_to',
	['posts'],
)
export const enum__pages_v_blocks_banner_style = pgEnum('enum__pages_v_blocks_banner_style', [
	'info',
	'warning',
	'error',
	'success',
])
export const enum__pages_v_blocks_cta_center_button_link_type = pgEnum(
	'enum__pages_v_blocks_cta_center_button_link_type',
	['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_left_button_link_type = pgEnum(
	'enum__pages_v_blocks_cta_left_button_link_type',
	['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_right_button_link_type = pgEnum(
	'enum__pages_v_blocks_cta_right_button_link_type',
	['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
	'enum__pages_v_blocks_content_columns_size',
	['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_font = pgEnum(
	'enum__pages_v_blocks_content_columns_font',
	['default', 'serif', 'sans-serif', 'monospace'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
	'enum__pages_v_blocks_content_columns_link_type',
	['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
	'enum__pages_v_blocks_content_columns_link_appearance',
	['default', 'outline'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
	'none',
	'highImpact',
	'mediumImpact',
	'lowImpact',
])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
	'draft',
	'published',
])
export const enum_posts_blocks_archive_populate_by = pgEnum(
	'enum_posts_blocks_archive_populate_by',
	['collection', 'selection'],
)
export const enum_posts_blocks_archive_relation_to = pgEnum(
	'enum_posts_blocks_archive_relation_to',
	['posts'],
)
export const enum_posts_blocks_cta_center_button_link_type = pgEnum(
	'enum_posts_blocks_cta_center_button_link_type',
	['reference', 'custom'],
)
export const enum_posts_blocks_cta_left_button_link_type = pgEnum(
	'enum_posts_blocks_cta_left_button_link_type',
	['reference', 'custom'],
)
export const enum_posts_blocks_cta_right_button_link_type = pgEnum(
	'enum_posts_blocks_cta_right_button_link_type',
	['reference', 'custom'],
)
export const enum_posts_blocks_content_columns_size = pgEnum(
	'enum_posts_blocks_content_columns_size',
	['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_posts_blocks_content_columns_font = pgEnum(
	'enum_posts_blocks_content_columns_font',
	['default', 'serif', 'sans-serif', 'monospace'],
)
export const enum_posts_blocks_content_columns_link_type = pgEnum(
	'enum_posts_blocks_content_columns_link_type',
	['reference', 'custom'],
)
export const enum_posts_blocks_content_columns_link_appearance = pgEnum(
	'enum_posts_blocks_content_columns_link_appearance',
	['default', 'outline'],
)
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_blocks_archive_populate_by = pgEnum(
	'enum__posts_v_blocks_archive_populate_by',
	['collection', 'selection'],
)
export const enum__posts_v_blocks_archive_relation_to = pgEnum(
	'enum__posts_v_blocks_archive_relation_to',
	['posts'],
)
export const enum__posts_v_blocks_cta_center_button_link_type = pgEnum(
	'enum__posts_v_blocks_cta_center_button_link_type',
	['reference', 'custom'],
)
export const enum__posts_v_blocks_cta_left_button_link_type = pgEnum(
	'enum__posts_v_blocks_cta_left_button_link_type',
	['reference', 'custom'],
)
export const enum__posts_v_blocks_cta_right_button_link_type = pgEnum(
	'enum__posts_v_blocks_cta_right_button_link_type',
	['reference', 'custom'],
)
export const enum__posts_v_blocks_content_columns_size = pgEnum(
	'enum__posts_v_blocks_content_columns_size',
	['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__posts_v_blocks_content_columns_font = pgEnum(
	'enum__posts_v_blocks_content_columns_font',
	['default', 'serif', 'sans-serif', 'monospace'],
)
export const enum__posts_v_blocks_content_columns_link_type = pgEnum(
	'enum__posts_v_blocks_content_columns_link_type',
	['reference', 'custom'],
)
export const enum__posts_v_blocks_content_columns_link_appearance = pgEnum(
	'enum__posts_v_blocks_content_columns_link_appearance',
	['default', 'outline'],
)
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
	'draft',
	'published',
])
export const enum_users_role = pgEnum('enum_users_role', ['admin', 'customer'])
export const enum_products_blocks_archive_populate_by = pgEnum(
	'enum_products_blocks_archive_populate_by',
	['collection', 'selection'],
)
export const enum_products_blocks_archive_relation_to = pgEnum(
	'enum_products_blocks_archive_relation_to',
	['posts'],
)
export const enum_products_blocks_cta_center_button_link_type = pgEnum(
	'enum_products_blocks_cta_center_button_link_type',
	['reference', 'custom'],
)
export const enum_products_blocks_cta_left_button_link_type = pgEnum(
	'enum_products_blocks_cta_left_button_link_type',
	['reference', 'custom'],
)
export const enum_products_blocks_cta_right_button_link_type = pgEnum(
	'enum_products_blocks_cta_right_button_link_type',
	['reference', 'custom'],
)
export const enum_products_blocks_content_columns_size = pgEnum(
	'enum_products_blocks_content_columns_size',
	['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_products_blocks_content_columns_font = pgEnum(
	'enum_products_blocks_content_columns_font',
	['default', 'serif', 'sans-serif', 'monospace'],
)
export const enum_products_blocks_content_columns_link_type = pgEnum(
	'enum_products_blocks_content_columns_link_type',
	['reference', 'custom'],
)
export const enum_products_blocks_content_columns_link_appearance = pgEnum(
	'enum_products_blocks_content_columns_link_appearance',
	['default', 'outline'],
)
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
	'message',
	'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
	'inline',
	'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
	'failed',
	'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
	'inline',
	'schedulePublish',
])
export const enum_header_nav_items_left_item = pgEnum('enum_header_nav_items_left_item', [
	'search',
	'products',
	'about',
	'events',
	'contact',
	'vie-en',
	'cart',
])
export const enum_header_nav_items_right_item = pgEnum('enum_header_nav_items_right_item', [
	'search',
	'products',
	'about',
	'events',
	'contact',
	'vie-en',
	'cart',
])
export const enum_promo_link_type = pgEnum('enum_promo_link_type', ['reference', 'custom'])

export const pages_hero_links = pgTable(
	'pages_hero_links',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
	},
	(columns) => ({
		_orderIdx: index('pages_hero_links_order_idx').on(columns._order),
		_parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_hero_links_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_archive = pgTable(
	'pages_blocks_archive',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		introContent: jsonb('intro_content'),
		populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
		relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
		limit: numeric('limit').default('10'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_archive_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_banner = pgTable(
	'pages_blocks_banner',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		style: enum_pages_blocks_banner_style('style').default('info'),
		content: jsonb('content'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_banner_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_banner_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_banner_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_banner_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_best_seller = pgTable(
	'pages_blocks_best_seller',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').default('Sản phẩm bán chạy'),
		description: varchar('description'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_best_seller_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_best_seller_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_best_seller_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_best_seller_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_buy_now = pgTable(
	'pages_blocks_buy_now',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_buy_now_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_buy_now_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_buy_now_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_buy_now_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_call_to_add_to_cart = pgTable(
	'pages_blocks_call_to_add_to_cart',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		content: jsonb('content'),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_call_to_add_to_cart_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_call_to_add_to_cart_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_call_to_add_to_cart_path_idx').on(columns._path),
		pages_blocks_call_to_add_to_cart_image_idx: index(
			'pages_blocks_call_to_add_to_cart_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_call_to_add_to_cart_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_cta_center = pgTable(
	'pages_blocks_cta_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum_pages_blocks_cta_center_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_cta_center_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_cta_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_cta_center_path_idx').on(columns._path),
		pages_blocks_cta_center_background_idx: index('pages_blocks_cta_center_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_cta_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_cta_left = pgTable(
	'pages_blocks_cta_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum_pages_blocks_cta_left_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_cta_left_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_cta_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_cta_left_path_idx').on(columns._path),
		pages_blocks_cta_left_background_idx: index('pages_blocks_cta_left_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_cta_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_cta_right_gallery = pgTable(
	'pages_blocks_cta_right_gallery',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_cta_right_gallery_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_cta_right_gallery_parent_id_idx').on(columns._parentID),
		pages_blocks_cta_right_gallery_image_idx: index(
			'pages_blocks_cta_right_gallery_image_idx',
		).on(columns.image),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages_blocks_cta_right.id],
			name: 'pages_blocks_cta_right_gallery_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_cta_right = pgTable(
	'pages_blocks_cta_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		button_text: varchar('button_text'),
		button_link_type:
			enum_pages_blocks_cta_right_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_cta_right_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_cta_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_cta_right_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_cta_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_call_to_action_post = pgTable(
	'pages_blocks_call_to_action_post',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		post: integer('post_id').references(() => posts.id, {
			onDelete: 'set null',
		}),
		overwriteTitle: varchar('overwrite_title'),
		overwriteDescription: varchar('overwrite_description'),
		buttonLabel: varchar('button_label').default('ĐỌC BÀI VIẾT'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_call_to_action_post_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_call_to_action_post_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_call_to_action_post_path_idx').on(columns._path),
		pages_blocks_call_to_action_post_post_idx: index(
			'pages_blocks_call_to_action_post_post_idx',
		).on(columns.post),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_call_to_action_post_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_certificates_organizations = pgTable(
	'pages_blocks_certificates_organizations',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		description: varchar('description'),
		logo: integer('logo_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_certificates_organizations_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_certificates_organizations_parent_id_idx').on(
			columns._parentID,
		),
		pages_blocks_certificates_organizations_logo_idx: index(
			'pages_blocks_certificates_organizations_logo_idx',
		).on(columns.logo),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages_blocks_certificates.id],
			name: 'pages_blocks_certificates_organizations_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_certificates = pgTable(
	'pages_blocks_certificates',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').default('Chứng nhận bởi các tổ chức quốc tế'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_certificates_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_certificates_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_certificates_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_certificates_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_content_columns = pgTable(
	'pages_blocks_content_columns',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		size: enum_pages_blocks_content_columns_size('size').default('full'),
		font: enum_pages_blocks_content_columns_font('font').default('default'),
		customCss: varchar('custom_css').default(''),
		richText: jsonb('rich_text'),
		enableLink: boolean('enable_link'),
		link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages_blocks_content.id],
			name: 'pages_blocks_content_columns_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_content = pgTable(
	'pages_blocks_content',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_content_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_form_block = pgTable(
	'pages_blocks_form_block',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		form: integer('form_id').references(() => forms.id, {
			onDelete: 'set null',
		}),
		enableIntro: boolean('enable_intro'),
		introContent: jsonb('intro_content'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
		pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_form_block_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_highlight_center = pgTable(
	'pages_blocks_highlight_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_highlight_center_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_highlight_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_highlight_center_path_idx').on(columns._path),
		pages_blocks_highlight_center_image_idx: index('pages_blocks_highlight_center_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_highlight_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_highlight_left = pgTable(
	'pages_blocks_highlight_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_highlight_left_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_highlight_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_highlight_left_path_idx').on(columns._path),
		pages_blocks_highlight_left_image_idx: index('pages_blocks_highlight_left_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_highlight_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_highlight_right = pgTable(
	'pages_blocks_highlight_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_highlight_right_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_highlight_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_highlight_right_path_idx').on(columns._path),
		pages_blocks_highlight_right_image_idx: index('pages_blocks_highlight_right_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_highlight_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_infinite_scroll = pgTable(
	'pages_blocks_infinite_scroll',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		graphic: integer('graphic_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		animationDuration: numeric('animation_duration').default('5'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_infinite_scroll_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_infinite_scroll_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_infinite_scroll_path_idx').on(columns._path),
		pages_blocks_infinite_scroll_graphic_idx: index(
			'pages_blocks_infinite_scroll_graphic_idx',
		).on(columns.graphic),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_infinite_scroll_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_latest_posts = pgTable(
	'pages_blocks_latest_posts',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').default('Bài viết mới nhất'),
		buttonLabel: varchar('button_label').default('TẤT CẢ BÀI VIẾT'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_latest_posts_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_latest_posts_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_latest_posts_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_latest_posts_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_media = pgTable(
	'pages_blocks_media',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		media: integer('media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_media_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_media_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_media_path_idx').on(columns._path),
		pages_blocks_media_media_idx: index('pages_blocks_media_media_idx').on(columns.media),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_media_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_posts_grid = pgTable(
	'pages_blocks_posts_grid',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_posts_grid_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_posts_grid_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_posts_grid_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_posts_grid_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_products_carousel = pgTable(
	'pages_blocks_products_carousel',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_products_carousel_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_products_carousel_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_products_carousel_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_products_carousel_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_products_category_products = pgTable(
	'pages_blocks_products_category_products',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		product: integer('product_id').references(() => products.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_products_category_products_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_products_category_products_parent_id_idx').on(
			columns._parentID,
		),
		pages_blocks_products_category_products_product_idx: index(
			'pages_blocks_products_category_products_product_idx',
		).on(columns.product),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages_blocks_products_category.id],
			name: 'pages_blocks_products_category_products_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_products_category = pgTable(
	'pages_blocks_products_category',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		buttonLabel: varchar('button_label').default('XEM TẤT CẢ CÁC SẢN PHẨM'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_products_category_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_products_category_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_products_category_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_products_category_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages_blocks_three_photo = pgTable(
	'pages_blocks_three_photo',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		photoLeft: integer('photo_left_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoCenter: integer('photo_center_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoRight: integer('photo_right_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('pages_blocks_three_photo_order_idx').on(columns._order),
		_parentIDIdx: index('pages_blocks_three_photo_parent_id_idx').on(columns._parentID),
		_pathIdx: index('pages_blocks_three_photo_path_idx').on(columns._path),
		pages_blocks_three_photo_photo_left_idx: index('pages_blocks_three_photo_photo_left_idx').on(
			columns.photoLeft,
		),
		pages_blocks_three_photo_photo_center_idx: index(
			'pages_blocks_three_photo_photo_center_idx',
		).on(columns.photoCenter),
		pages_blocks_three_photo_photo_right_idx: index(
			'pages_blocks_three_photo_photo_right_idx',
		).on(columns.photoRight),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [pages.id],
			name: 'pages_blocks_three_photo_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const pages = pgTable(
	'pages',
	{
		id: serial('id').primaryKey(),
		title: varchar('title'),
		hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
		hero_title: varchar('hero_title'),
		hero_subtitle: varchar('hero_subtitle'),
		hero_description: jsonb('hero_description'),
		hero_media: integer('hero_media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_meta_title: varchar('meta_meta_title'),
		meta_meta_image: integer('meta_meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_meta_description: varchar('meta_meta_description'),
		publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		_status: enum_pages_status('_status').default('draft'),
	},
	(columns) => ({
		pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
		pages_meta_meta_meta_meta_image_idx: index('pages_meta_meta_meta_meta_image_idx').on(
			columns.meta_meta_image,
		),
		pages_slug_idx: index('pages_slug_idx').on(columns.slug),
		pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
		pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
		pages__status_idx: index('pages__status_idx').on(columns._status),
	}),
)

export const pages_rels = pgTable(
	'pages_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		pagesID: integer('pages_id'),
		postsID: integer('posts_id'),
		postCategoriesID: integer('post_categories_id'),
		productsID: integer('products_id'),
		productCategoriesID: integer('product_categories_id'),
		productSubCategoriesID: integer('product_sub_categories_id'),
	},
	(columns) => ({
		order: index('pages_rels_order_idx').on(columns.order),
		parentIdx: index('pages_rels_parent_idx').on(columns.parent),
		pathIdx: index('pages_rels_path_idx').on(columns.path),
		pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
		pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
		pages_rels_post_categories_id_idx: index('pages_rels_post_categories_id_idx').on(
			columns.postCategoriesID,
		),
		pages_rels_products_id_idx: index('pages_rels_products_id_idx').on(columns.productsID),
		pages_rels_product_categories_id_idx: index('pages_rels_product_categories_id_idx').on(
			columns.productCategoriesID,
		),
		pages_rels_product_sub_categories_id_idx: index(
			'pages_rels_product_sub_categories_id_idx',
		).on(columns.productSubCategoriesID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [pages.id],
			name: 'pages_rels_parent_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'pages_rels_pages_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'pages_rels_posts_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: 'pages_rels_post_categories_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: 'pages_rels_products_fk',
		}).onDelete('cascade'),
		productCategoriesIdFk: foreignKey({
			columns: [columns['productCategoriesID']],
			foreignColumns: [product_categories.id],
			name: 'pages_rels_product_categories_fk',
		}).onDelete('cascade'),
		productSubCategoriesIdFk: foreignKey({
			columns: [columns['productSubCategoriesID']],
			foreignColumns: [product_sub_categories.id],
			name: 'pages_rels_product_sub_categories_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_version_hero_links = pgTable(
	'_pages_v_version_hero_links',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_version_hero_links_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_archive = pgTable(
	'_pages_v_blocks_archive',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		introContent: jsonb('intro_content'),
		populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
		relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
		limit: numeric('limit').default('10'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_archive_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_banner = pgTable(
	'_pages_v_blocks_banner',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		style: enum__pages_v_blocks_banner_style('style').default('info'),
		content: jsonb('content'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_banner_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_banner_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_banner_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_banner_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_best_seller = pgTable(
	'_pages_v_blocks_best_seller',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title').default('Sản phẩm bán chạy'),
		description: varchar('description'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_best_seller_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_best_seller_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_best_seller_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_best_seller_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_buy_now = pgTable(
	'_pages_v_blocks_buy_now',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_buy_now_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_buy_now_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_buy_now_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_buy_now_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_call_to_add_to_cart = pgTable(
	'_pages_v_blocks_call_to_add_to_cart',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		content: jsonb('content'),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_call_to_add_to_cart_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_call_to_add_to_cart_parent_id_idx').on(
			columns._parentID,
		),
		_pathIdx: index('_pages_v_blocks_call_to_add_to_cart_path_idx').on(columns._path),
		_pages_v_blocks_call_to_add_to_cart_image_idx: index(
			'_pages_v_blocks_call_to_add_to_cart_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_call_to_add_to_cart_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_cta_center = pgTable(
	'_pages_v_blocks_cta_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum__pages_v_blocks_cta_center_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_cta_center_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_cta_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_cta_center_path_idx').on(columns._path),
		_pages_v_blocks_cta_center_background_idx: index(
			'_pages_v_blocks_cta_center_background_idx',
		).on(columns.background),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_cta_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_cta_left = pgTable(
	'_pages_v_blocks_cta_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum__pages_v_blocks_cta_left_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_cta_left_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_cta_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_cta_left_path_idx').on(columns._path),
		_pages_v_blocks_cta_left_background_idx: index('_pages_v_blocks_cta_left_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_cta_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_cta_right_gallery = pgTable(
	'_pages_v_blocks_cta_right_gallery',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_cta_right_gallery_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_cta_right_gallery_parent_id_idx').on(columns._parentID),
		_pages_v_blocks_cta_right_gallery_image_idx: index(
			'_pages_v_blocks_cta_right_gallery_image_idx',
		).on(columns.image),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v_blocks_cta_right.id],
			name: '_pages_v_blocks_cta_right_gallery_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_cta_right = pgTable(
	'_pages_v_blocks_cta_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		button_text: varchar('button_text'),
		button_link_type:
			enum__pages_v_blocks_cta_right_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_cta_right_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_cta_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_cta_right_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_cta_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_call_to_action_post = pgTable(
	'_pages_v_blocks_call_to_action_post',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		post: integer('post_id').references(() => posts.id, {
			onDelete: 'set null',
		}),
		overwriteTitle: varchar('overwrite_title'),
		overwriteDescription: varchar('overwrite_description'),
		buttonLabel: varchar('button_label').default('ĐỌC BÀI VIẾT'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_call_to_action_post_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_call_to_action_post_parent_id_idx').on(
			columns._parentID,
		),
		_pathIdx: index('_pages_v_blocks_call_to_action_post_path_idx').on(columns._path),
		_pages_v_blocks_call_to_action_post_post_idx: index(
			'_pages_v_blocks_call_to_action_post_post_idx',
		).on(columns.post),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_call_to_action_post_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_certificates_organizations = pgTable(
	'_pages_v_blocks_certificates_organizations',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		description: varchar('description'),
		logo: integer('logo_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_certificates_organizations_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_certificates_organizations_parent_id_idx').on(
			columns._parentID,
		),
		_pages_v_blocks_certificates_organizations_logo_idx: index(
			'_pages_v_blocks_certificates_organizations_logo_idx',
		).on(columns.logo),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v_blocks_certificates.id],
			name: '_pages_v_blocks_certificates_organizations_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_certificates = pgTable(
	'_pages_v_blocks_certificates',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title').default('Chứng nhận bởi các tổ chức quốc tế'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_certificates_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_certificates_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_certificates_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_certificates_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_content_columns = pgTable(
	'_pages_v_blocks_content_columns',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		size: enum__pages_v_blocks_content_columns_size('size').default('full'),
		font: enum__pages_v_blocks_content_columns_font('font').default('default'),
		customCss: varchar('custom_css').default(''),
		richText: jsonb('rich_text'),
		enableLink: boolean('enable_link'),
		link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v_blocks_content.id],
			name: '_pages_v_blocks_content_columns_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_content = pgTable(
	'_pages_v_blocks_content',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_content_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_form_block = pgTable(
	'_pages_v_blocks_form_block',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		form: integer('form_id').references(() => forms.id, {
			onDelete: 'set null',
		}),
		enableIntro: boolean('enable_intro'),
		introContent: jsonb('intro_content'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
		_pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
			columns.form,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_form_block_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_highlight_center = pgTable(
	'_pages_v_blocks_highlight_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_highlight_center_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_highlight_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_highlight_center_path_idx').on(columns._path),
		_pages_v_blocks_highlight_center_image_idx: index(
			'_pages_v_blocks_highlight_center_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_highlight_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_highlight_left = pgTable(
	'_pages_v_blocks_highlight_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_highlight_left_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_highlight_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_highlight_left_path_idx').on(columns._path),
		_pages_v_blocks_highlight_left_image_idx: index(
			'_pages_v_blocks_highlight_left_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_highlight_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_highlight_right = pgTable(
	'_pages_v_blocks_highlight_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_highlight_right_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_highlight_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_highlight_right_path_idx').on(columns._path),
		_pages_v_blocks_highlight_right_image_idx: index(
			'_pages_v_blocks_highlight_right_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_highlight_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_infinite_scroll = pgTable(
	'_pages_v_blocks_infinite_scroll',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		graphic: integer('graphic_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		animationDuration: numeric('animation_duration').default('5'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_infinite_scroll_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_infinite_scroll_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_infinite_scroll_path_idx').on(columns._path),
		_pages_v_blocks_infinite_scroll_graphic_idx: index(
			'_pages_v_blocks_infinite_scroll_graphic_idx',
		).on(columns.graphic),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_infinite_scroll_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_latest_posts = pgTable(
	'_pages_v_blocks_latest_posts',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title').default('Bài viết mới nhất'),
		buttonLabel: varchar('button_label').default('TẤT CẢ BÀI VIẾT'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_latest_posts_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_latest_posts_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_latest_posts_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_latest_posts_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_media = pgTable(
	'_pages_v_blocks_media',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		media: integer('media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_media_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_media_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_media_path_idx').on(columns._path),
		_pages_v_blocks_media_media_idx: index('_pages_v_blocks_media_media_idx').on(columns.media),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_media_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_posts_grid = pgTable(
	'_pages_v_blocks_posts_grid',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_posts_grid_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_posts_grid_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_posts_grid_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_posts_grid_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_products_carousel = pgTable(
	'_pages_v_blocks_products_carousel',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_products_carousel_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_products_carousel_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_products_carousel_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_products_carousel_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_products_category_products = pgTable(
	'_pages_v_blocks_products_category_products',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		product: integer('product_id').references(() => products.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_products_category_products_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_products_category_products_parent_id_idx').on(
			columns._parentID,
		),
		_pages_v_blocks_products_category_products_product_idx: index(
			'_pages_v_blocks_products_category_products_product_idx',
		).on(columns.product),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v_blocks_products_category.id],
			name: '_pages_v_blocks_products_category_products_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_products_category = pgTable(
	'_pages_v_blocks_products_category',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		buttonLabel: varchar('button_label').default('XEM TẤT CẢ CÁC SẢN PHẨM'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_products_category_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_products_category_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_products_category_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_products_category_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v_blocks_three_photo = pgTable(
	'_pages_v_blocks_three_photo',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		photoLeft: integer('photo_left_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoCenter: integer('photo_center_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoRight: integer('photo_right_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_pages_v_blocks_three_photo_order_idx').on(columns._order),
		_parentIDIdx: index('_pages_v_blocks_three_photo_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_pages_v_blocks_three_photo_path_idx').on(columns._path),
		_pages_v_blocks_three_photo_photo_left_idx: index(
			'_pages_v_blocks_three_photo_photo_left_idx',
		).on(columns.photoLeft),
		_pages_v_blocks_three_photo_photo_center_idx: index(
			'_pages_v_blocks_three_photo_photo_center_idx',
		).on(columns.photoCenter),
		_pages_v_blocks_three_photo_photo_right_idx: index(
			'_pages_v_blocks_three_photo_photo_right_idx',
		).on(columns.photoRight),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_blocks_three_photo_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _pages_v = pgTable(
	'_pages_v',
	{
		id: serial('id').primaryKey(),
		parent: integer('parent_id').references(() => pages.id, {
			onDelete: 'set null',
		}),
		version_title: varchar('version_title'),
		version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
		version_hero_title: varchar('version_hero_title'),
		version_hero_subtitle: varchar('version_hero_subtitle'),
		version_hero_description: jsonb('version_hero_description'),
		version_hero_media: integer('version_hero_media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		version_meta_meta_title: varchar('version_meta_meta_title'),
		version_meta_meta_image: integer('version_meta_meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		version_meta_meta_description: varchar('version_meta_meta_description'),
		version_publishedAt: timestamp('version_published_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version_slug: varchar('version_slug'),
		version_slugLock: boolean('version_slug_lock').default(true),
		version_updatedAt: timestamp('version_updated_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version_createdAt: timestamp('version_created_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version__status: enum__pages_v_version_status('version__status').default('draft'),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		latest: boolean('latest'),
		autosave: boolean('autosave'),
	},
	(columns) => ({
		_pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
		_pages_v_version_hero_version_hero_media_idx: index(
			'_pages_v_version_hero_version_hero_media_idx',
		).on(columns.version_hero_media),
		_pages_v_version_meta_meta_version_meta_meta_image_idx: index(
			'_pages_v_version_meta_meta_version_meta_meta_image_idx',
		).on(columns.version_meta_meta_image),
		_pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
			columns.version_slug,
		),
		_pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
			columns.version_updatedAt,
		),
		_pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
			columns.version_createdAt,
		),
		_pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
			columns.version__status,
		),
		_pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
		_pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
		_pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
		_pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
	}),
)

export const _pages_v_rels = pgTable(
	'_pages_v_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		pagesID: integer('pages_id'),
		postsID: integer('posts_id'),
		postCategoriesID: integer('post_categories_id'),
		productsID: integer('products_id'),
		productCategoriesID: integer('product_categories_id'),
		productSubCategoriesID: integer('product_sub_categories_id'),
	},
	(columns) => ({
		order: index('_pages_v_rels_order_idx').on(columns.order),
		parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
		pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
		_pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
		_pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
		_pages_v_rels_post_categories_id_idx: index('_pages_v_rels_post_categories_id_idx').on(
			columns.postCategoriesID,
		),
		_pages_v_rels_products_id_idx: index('_pages_v_rels_products_id_idx').on(columns.productsID),
		_pages_v_rels_product_categories_id_idx: index('_pages_v_rels_product_categories_id_idx').on(
			columns.productCategoriesID,
		),
		_pages_v_rels_product_sub_categories_id_idx: index(
			'_pages_v_rels_product_sub_categories_id_idx',
		).on(columns.productSubCategoriesID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [_pages_v.id],
			name: '_pages_v_rels_parent_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: '_pages_v_rels_pages_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: '_pages_v_rels_posts_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: '_pages_v_rels_post_categories_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: '_pages_v_rels_products_fk',
		}).onDelete('cascade'),
		productCategoriesIdFk: foreignKey({
			columns: [columns['productCategoriesID']],
			foreignColumns: [product_categories.id],
			name: '_pages_v_rels_product_categories_fk',
		}).onDelete('cascade'),
		productSubCategoriesIdFk: foreignKey({
			columns: [columns['productSubCategoriesID']],
			foreignColumns: [product_sub_categories.id],
			name: '_pages_v_rels_product_sub_categories_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_archive = pgTable(
	'posts_blocks_archive',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		introContent: jsonb('intro_content'),
		populateBy: enum_posts_blocks_archive_populate_by('populate_by').default('collection'),
		relationTo: enum_posts_blocks_archive_relation_to('relation_to').default('posts'),
		limit: numeric('limit').default('10'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_archive_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_archive_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_archive_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_archive_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_buy_now = pgTable(
	'posts_blocks_buy_now',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_buy_now_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_buy_now_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_buy_now_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_buy_now_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_call_to_add_to_cart = pgTable(
	'posts_blocks_call_to_add_to_cart',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		content: jsonb('content'),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_call_to_add_to_cart_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_call_to_add_to_cart_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_call_to_add_to_cart_path_idx').on(columns._path),
		posts_blocks_call_to_add_to_cart_image_idx: index(
			'posts_blocks_call_to_add_to_cart_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_call_to_add_to_cart_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_cta_center = pgTable(
	'posts_blocks_cta_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum_posts_blocks_cta_center_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_cta_center_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_cta_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_cta_center_path_idx').on(columns._path),
		posts_blocks_cta_center_background_idx: index('posts_blocks_cta_center_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_cta_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_cta_left = pgTable(
	'posts_blocks_cta_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum_posts_blocks_cta_left_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_cta_left_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_cta_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_cta_left_path_idx').on(columns._path),
		posts_blocks_cta_left_background_idx: index('posts_blocks_cta_left_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_cta_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_cta_right_gallery = pgTable(
	'posts_blocks_cta_right_gallery',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_cta_right_gallery_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_cta_right_gallery_parent_id_idx').on(columns._parentID),
		posts_blocks_cta_right_gallery_image_idx: index(
			'posts_blocks_cta_right_gallery_image_idx',
		).on(columns.image),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts_blocks_cta_right.id],
			name: 'posts_blocks_cta_right_gallery_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_cta_right = pgTable(
	'posts_blocks_cta_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		button_text: varchar('button_text'),
		button_link_type:
			enum_posts_blocks_cta_right_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_cta_right_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_cta_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_cta_right_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_cta_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_certificates_organizations = pgTable(
	'posts_blocks_certificates_organizations',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title'),
		description: varchar('description'),
		logo: integer('logo_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_certificates_organizations_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_certificates_organizations_parent_id_idx').on(
			columns._parentID,
		),
		posts_blocks_certificates_organizations_logo_idx: index(
			'posts_blocks_certificates_organizations_logo_idx',
		).on(columns.logo),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts_blocks_certificates.id],
			name: 'posts_blocks_certificates_organizations_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_certificates = pgTable(
	'posts_blocks_certificates',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').default('Chứng nhận bởi các tổ chức quốc tế'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_certificates_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_certificates_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_certificates_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_certificates_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_content_columns = pgTable(
	'posts_blocks_content_columns',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		size: enum_posts_blocks_content_columns_size('size').default('full'),
		font: enum_posts_blocks_content_columns_font('font').default('default'),
		customCss: varchar('custom_css').default(''),
		richText: jsonb('rich_text'),
		enableLink: boolean('enable_link'),
		link_type: enum_posts_blocks_content_columns_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum_posts_blocks_content_columns_link_appearance('link_appearance').default('default'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_content_columns_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_content_columns_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts_blocks_content.id],
			name: 'posts_blocks_content_columns_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_content = pgTable(
	'posts_blocks_content',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_content_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_content_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_content_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_content_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_form_block = pgTable(
	'posts_blocks_form_block',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		form: integer('form_id').references(() => forms.id, {
			onDelete: 'set null',
		}),
		enableIntro: boolean('enable_intro'),
		introContent: jsonb('intro_content'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_form_block_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_form_block_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_form_block_path_idx').on(columns._path),
		posts_blocks_form_block_form_idx: index('posts_blocks_form_block_form_idx').on(columns.form),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_form_block_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_highlight_center = pgTable(
	'posts_blocks_highlight_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_highlight_center_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_highlight_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_highlight_center_path_idx').on(columns._path),
		posts_blocks_highlight_center_image_idx: index('posts_blocks_highlight_center_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_highlight_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_highlight_left = pgTable(
	'posts_blocks_highlight_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_highlight_left_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_highlight_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_highlight_left_path_idx').on(columns._path),
		posts_blocks_highlight_left_image_idx: index('posts_blocks_highlight_left_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_highlight_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_highlight_right = pgTable(
	'posts_blocks_highlight_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_highlight_right_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_highlight_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_highlight_right_path_idx').on(columns._path),
		posts_blocks_highlight_right_image_idx: index('posts_blocks_highlight_right_image_idx').on(
			columns.image,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_highlight_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_infinite_scroll = pgTable(
	'posts_blocks_infinite_scroll',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		graphic: integer('graphic_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		animationDuration: numeric('animation_duration').default('5'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_infinite_scroll_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_infinite_scroll_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_infinite_scroll_path_idx').on(columns._path),
		posts_blocks_infinite_scroll_graphic_idx: index(
			'posts_blocks_infinite_scroll_graphic_idx',
		).on(columns.graphic),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_infinite_scroll_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_media = pgTable(
	'posts_blocks_media',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		media: integer('media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_media_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_media_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_media_path_idx').on(columns._path),
		posts_blocks_media_media_idx: index('posts_blocks_media_media_idx').on(columns.media),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_media_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_products_carousel = pgTable(
	'posts_blocks_products_carousel',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_products_carousel_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_products_carousel_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_products_carousel_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_products_carousel_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_blocks_three_photo = pgTable(
	'posts_blocks_three_photo',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		photoLeft: integer('photo_left_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoCenter: integer('photo_center_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoRight: integer('photo_right_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('posts_blocks_three_photo_order_idx').on(columns._order),
		_parentIDIdx: index('posts_blocks_three_photo_parent_id_idx').on(columns._parentID),
		_pathIdx: index('posts_blocks_three_photo_path_idx').on(columns._path),
		posts_blocks_three_photo_photo_left_idx: index('posts_blocks_three_photo_photo_left_idx').on(
			columns.photoLeft,
		),
		posts_blocks_three_photo_photo_center_idx: index(
			'posts_blocks_three_photo_photo_center_idx',
		).on(columns.photoCenter),
		posts_blocks_three_photo_photo_right_idx: index(
			'posts_blocks_three_photo_photo_right_idx',
		).on(columns.photoRight),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_blocks_three_photo_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts_populated_authors = pgTable(
	'posts_populated_authors',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name'),
	},
	(columns) => ({
		_orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
		_parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [posts.id],
			name: 'posts_populated_authors_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const posts = pgTable(
	'posts',
	{
		id: serial('id').primaryKey(),
		title: varchar('title'),
		heroImage: integer('hero_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_title: varchar('meta_title'),
		meta_image: integer('meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_description: varchar('meta_description'),
		publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		_status: enum_posts_status('_status').default('draft'),
	},
	(columns) => ({
		posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
		posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
		posts_slug_idx: index('posts_slug_idx').on(columns.slug),
		posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
		posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
		posts__status_idx: index('posts__status_idx').on(columns._status),
	}),
)

export const posts_rels = pgTable(
	'posts_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		postCategoriesID: integer('post_categories_id'),
		postsID: integer('posts_id'),
		pagesID: integer('pages_id'),
		productsID: integer('products_id'),
		usersID: integer('users_id'),
	},
	(columns) => ({
		order: index('posts_rels_order_idx').on(columns.order),
		parentIdx: index('posts_rels_parent_idx').on(columns.parent),
		pathIdx: index('posts_rels_path_idx').on(columns.path),
		posts_rels_post_categories_id_idx: index('posts_rels_post_categories_id_idx').on(
			columns.postCategoriesID,
		),
		posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
		posts_rels_pages_id_idx: index('posts_rels_pages_id_idx').on(columns.pagesID),
		posts_rels_products_id_idx: index('posts_rels_products_id_idx').on(columns.productsID),
		posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [posts.id],
			name: 'posts_rels_parent_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: 'posts_rels_post_categories_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'posts_rels_posts_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'posts_rels_pages_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: 'posts_rels_products_fk',
		}).onDelete('cascade'),
		usersIdFk: foreignKey({
			columns: [columns['usersID']],
			foreignColumns: [users.id],
			name: 'posts_rels_users_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_archive = pgTable(
	'_posts_v_blocks_archive',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		introContent: jsonb('intro_content'),
		populateBy: enum__posts_v_blocks_archive_populate_by('populate_by').default('collection'),
		relationTo: enum__posts_v_blocks_archive_relation_to('relation_to').default('posts'),
		limit: numeric('limit').default('10'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_archive_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_archive_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_archive_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_archive_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_buy_now = pgTable(
	'_posts_v_blocks_buy_now',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_buy_now_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_buy_now_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_buy_now_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_buy_now_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_call_to_add_to_cart = pgTable(
	'_posts_v_blocks_call_to_add_to_cart',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		content: jsonb('content'),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_call_to_add_to_cart_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_call_to_add_to_cart_parent_id_idx').on(
			columns._parentID,
		),
		_pathIdx: index('_posts_v_blocks_call_to_add_to_cart_path_idx').on(columns._path),
		_posts_v_blocks_call_to_add_to_cart_image_idx: index(
			'_posts_v_blocks_call_to_add_to_cart_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_call_to_add_to_cart_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_cta_center = pgTable(
	'_posts_v_blocks_cta_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum__posts_v_blocks_cta_center_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_cta_center_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_cta_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_cta_center_path_idx').on(columns._path),
		_posts_v_blocks_cta_center_background_idx: index(
			'_posts_v_blocks_cta_center_background_idx',
		).on(columns.background),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_cta_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_cta_left = pgTable(
	'_posts_v_blocks_cta_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text'),
		button_link_type:
			enum__posts_v_blocks_cta_left_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_cta_left_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_cta_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_cta_left_path_idx').on(columns._path),
		_posts_v_blocks_cta_left_background_idx: index('_posts_v_blocks_cta_left_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_cta_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_cta_right_gallery = pgTable(
	'_posts_v_blocks_cta_right_gallery',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_cta_right_gallery_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_cta_right_gallery_parent_id_idx').on(columns._parentID),
		_posts_v_blocks_cta_right_gallery_image_idx: index(
			'_posts_v_blocks_cta_right_gallery_image_idx',
		).on(columns.image),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v_blocks_cta_right.id],
			name: '_posts_v_blocks_cta_right_gallery_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_cta_right = pgTable(
	'_posts_v_blocks_cta_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		button_text: varchar('button_text'),
		button_link_type:
			enum__posts_v_blocks_cta_right_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_cta_right_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_cta_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_cta_right_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_cta_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_certificates_organizations = pgTable(
	'_posts_v_blocks_certificates_organizations',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title'),
		description: varchar('description'),
		logo: integer('logo_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_certificates_organizations_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_certificates_organizations_parent_id_idx').on(
			columns._parentID,
		),
		_posts_v_blocks_certificates_organizations_logo_idx: index(
			'_posts_v_blocks_certificates_organizations_logo_idx',
		).on(columns.logo),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v_blocks_certificates.id],
			name: '_posts_v_blocks_certificates_organizations_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_certificates = pgTable(
	'_posts_v_blocks_certificates',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		title: varchar('title').default('Chứng nhận bởi các tổ chức quốc tế'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_certificates_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_certificates_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_certificates_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_certificates_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_content_columns = pgTable(
	'_posts_v_blocks_content_columns',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		size: enum__posts_v_blocks_content_columns_size('size').default('full'),
		font: enum__posts_v_blocks_content_columns_font('font').default('default'),
		customCss: varchar('custom_css').default(''),
		richText: jsonb('rich_text'),
		enableLink: boolean('enable_link'),
		link_type: enum__posts_v_blocks_content_columns_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum__posts_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
		_uuid: varchar('_uuid'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_content_columns_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v_blocks_content.id],
			name: '_posts_v_blocks_content_columns_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_content = pgTable(
	'_posts_v_blocks_content',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_content_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_content_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_content_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_content_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_form_block = pgTable(
	'_posts_v_blocks_form_block',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		form: integer('form_id').references(() => forms.id, {
			onDelete: 'set null',
		}),
		enableIntro: boolean('enable_intro'),
		introContent: jsonb('intro_content'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_form_block_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_form_block_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_form_block_path_idx').on(columns._path),
		_posts_v_blocks_form_block_form_idx: index('_posts_v_blocks_form_block_form_idx').on(
			columns.form,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_form_block_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_highlight_center = pgTable(
	'_posts_v_blocks_highlight_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_highlight_center_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_highlight_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_highlight_center_path_idx').on(columns._path),
		_posts_v_blocks_highlight_center_image_idx: index(
			'_posts_v_blocks_highlight_center_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_highlight_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_highlight_left = pgTable(
	'_posts_v_blocks_highlight_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_highlight_left_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_highlight_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_highlight_left_path_idx').on(columns._path),
		_posts_v_blocks_highlight_left_image_idx: index(
			'_posts_v_blocks_highlight_left_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_highlight_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_highlight_right = pgTable(
	'_posts_v_blocks_highlight_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		order: numeric('order'),
		title: varchar('title'),
		description: varchar('description'),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_highlight_right_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_highlight_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_highlight_right_path_idx').on(columns._path),
		_posts_v_blocks_highlight_right_image_idx: index(
			'_posts_v_blocks_highlight_right_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_highlight_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_infinite_scroll = pgTable(
	'_posts_v_blocks_infinite_scroll',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		graphic: integer('graphic_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		animationDuration: numeric('animation_duration').default('5'),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_infinite_scroll_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_infinite_scroll_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_infinite_scroll_path_idx').on(columns._path),
		_posts_v_blocks_infinite_scroll_graphic_idx: index(
			'_posts_v_blocks_infinite_scroll_graphic_idx',
		).on(columns.graphic),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_infinite_scroll_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_media = pgTable(
	'_posts_v_blocks_media',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		media: integer('media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_media_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_media_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_media_path_idx').on(columns._path),
		_posts_v_blocks_media_media_idx: index('_posts_v_blocks_media_media_idx').on(columns.media),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_media_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_products_carousel = pgTable(
	'_posts_v_blocks_products_carousel',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_products_carousel_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_products_carousel_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_products_carousel_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_products_carousel_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_blocks_three_photo = pgTable(
	'_posts_v_blocks_three_photo',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: serial('id').primaryKey(),
		photoLeft: integer('photo_left_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoCenter: integer('photo_center_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoRight: integer('photo_right_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		_uuid: varchar('_uuid'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_blocks_three_photo_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_blocks_three_photo_parent_id_idx').on(columns._parentID),
		_pathIdx: index('_posts_v_blocks_three_photo_path_idx').on(columns._path),
		_posts_v_blocks_three_photo_photo_left_idx: index(
			'_posts_v_blocks_three_photo_photo_left_idx',
		).on(columns.photoLeft),
		_posts_v_blocks_three_photo_photo_center_idx: index(
			'_posts_v_blocks_three_photo_photo_center_idx',
		).on(columns.photoCenter),
		_posts_v_blocks_three_photo_photo_right_idx: index(
			'_posts_v_blocks_three_photo_photo_right_idx',
		).on(columns.photoRight),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_blocks_three_photo_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v_version_populated_authors = pgTable(
	'_posts_v_version_populated_authors',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: serial('id').primaryKey(),
		_uuid: varchar('_uuid'),
		name: varchar('name'),
	},
	(columns) => ({
		_orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
		_parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_version_populated_authors_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const _posts_v = pgTable(
	'_posts_v',
	{
		id: serial('id').primaryKey(),
		parent: integer('parent_id').references(() => posts.id, {
			onDelete: 'set null',
		}),
		version_title: varchar('version_title'),
		version_heroImage: integer('version_hero_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		version_meta_title: varchar('version_meta_title'),
		version_meta_image: integer('version_meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		version_meta_description: varchar('version_meta_description'),
		version_publishedAt: timestamp('version_published_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version_slug: varchar('version_slug'),
		version_slugLock: boolean('version_slug_lock').default(true),
		version_updatedAt: timestamp('version_updated_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version_createdAt: timestamp('version_created_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		version__status: enum__posts_v_version_status('version__status').default('draft'),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		latest: boolean('latest'),
		autosave: boolean('autosave'),
	},
	(columns) => ({
		_posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
		_posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
			columns.version_heroImage,
		),
		_posts_v_version_meta_version_meta_image_idx: index(
			'_posts_v_version_meta_version_meta_image_idx',
		).on(columns.version_meta_image),
		_posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
			columns.version_slug,
		),
		_posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
			columns.version_updatedAt,
		),
		_posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
			columns.version_createdAt,
		),
		_posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
			columns.version__status,
		),
		_posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
		_posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
		_posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
		_posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
	}),
)

export const _posts_v_rels = pgTable(
	'_posts_v_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		postCategoriesID: integer('post_categories_id'),
		postsID: integer('posts_id'),
		pagesID: integer('pages_id'),
		productsID: integer('products_id'),
		usersID: integer('users_id'),
	},
	(columns) => ({
		order: index('_posts_v_rels_order_idx').on(columns.order),
		parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
		pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
		_posts_v_rels_post_categories_id_idx: index('_posts_v_rels_post_categories_id_idx').on(
			columns.postCategoriesID,
		),
		_posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
		_posts_v_rels_pages_id_idx: index('_posts_v_rels_pages_id_idx').on(columns.pagesID),
		_posts_v_rels_products_id_idx: index('_posts_v_rels_products_id_idx').on(columns.productsID),
		_posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [_posts_v.id],
			name: '_posts_v_rels_parent_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: '_posts_v_rels_post_categories_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: '_posts_v_rels_posts_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: '_posts_v_rels_pages_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: '_posts_v_rels_products_fk',
		}).onDelete('cascade'),
		usersIdFk: foreignKey({
			columns: [columns['usersID']],
			foreignColumns: [users.id],
			name: '_posts_v_rels_users_fk',
		}).onDelete('cascade'),
	}),
)

export const media = pgTable(
	'media',
	{
		id: serial('id').primaryKey(),
		alt: varchar('alt'),
		caption: jsonb('caption'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		url: varchar('url'),
		thumbnailURL: varchar('thumbnail_u_r_l'),
		filename: varchar('filename'),
		mimeType: varchar('mime_type'),
		filesize: numeric('filesize'),
		width: numeric('width'),
		height: numeric('height'),
		focalX: numeric('focal_x'),
		focalY: numeric('focal_y'),
		sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
		sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
		sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
		sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
		sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
		sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
		sizes_square_url: varchar('sizes_square_url'),
		sizes_square_width: numeric('sizes_square_width'),
		sizes_square_height: numeric('sizes_square_height'),
		sizes_square_mimeType: varchar('sizes_square_mime_type'),
		sizes_square_filesize: numeric('sizes_square_filesize'),
		sizes_square_filename: varchar('sizes_square_filename'),
		sizes_small_url: varchar('sizes_small_url'),
		sizes_small_width: numeric('sizes_small_width'),
		sizes_small_height: numeric('sizes_small_height'),
		sizes_small_mimeType: varchar('sizes_small_mime_type'),
		sizes_small_filesize: numeric('sizes_small_filesize'),
		sizes_small_filename: varchar('sizes_small_filename'),
		sizes_medium_url: varchar('sizes_medium_url'),
		sizes_medium_width: numeric('sizes_medium_width'),
		sizes_medium_height: numeric('sizes_medium_height'),
		sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
		sizes_medium_filesize: numeric('sizes_medium_filesize'),
		sizes_medium_filename: varchar('sizes_medium_filename'),
		sizes_large_url: varchar('sizes_large_url'),
		sizes_large_width: numeric('sizes_large_width'),
		sizes_large_height: numeric('sizes_large_height'),
		sizes_large_mimeType: varchar('sizes_large_mime_type'),
		sizes_large_filesize: numeric('sizes_large_filesize'),
		sizes_large_filename: varchar('sizes_large_filename'),
		sizes_xlarge_url: varchar('sizes_xlarge_url'),
		sizes_xlarge_width: numeric('sizes_xlarge_width'),
		sizes_xlarge_height: numeric('sizes_xlarge_height'),
		sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
		sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
		sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
		sizes_og_url: varchar('sizes_og_url'),
		sizes_og_width: numeric('sizes_og_width'),
		sizes_og_height: numeric('sizes_og_height'),
		sizes_og_mimeType: varchar('sizes_og_mime_type'),
		sizes_og_filesize: numeric('sizes_og_filesize'),
		sizes_og_filename: varchar('sizes_og_filename'),
	},
	(columns) => ({
		media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
		media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
		media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
		media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
			'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
		).on(columns.sizes_thumbnail_filename),
		media_sizes_square_sizes_square_filename_idx: index(
			'media_sizes_square_sizes_square_filename_idx',
		).on(columns.sizes_square_filename),
		media_sizes_small_sizes_small_filename_idx: index(
			'media_sizes_small_sizes_small_filename_idx',
		).on(columns.sizes_small_filename),
		media_sizes_medium_sizes_medium_filename_idx: index(
			'media_sizes_medium_sizes_medium_filename_idx',
		).on(columns.sizes_medium_filename),
		media_sizes_large_sizes_large_filename_idx: index(
			'media_sizes_large_sizes_large_filename_idx',
		).on(columns.sizes_large_filename),
		media_sizes_xlarge_sizes_xlarge_filename_idx: index(
			'media_sizes_xlarge_sizes_xlarge_filename_idx',
		).on(columns.sizes_xlarge_filename),
		media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
			columns.sizes_og_filename,
		),
	}),
)

export const post_categories_breadcrumbs = pgTable(
	'post_categories_breadcrumbs',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		doc: integer('doc_id').references(() => post_categories.id, {
			onDelete: 'set null',
		}),
		url: varchar('url'),
		label: varchar('label'),
	},
	(columns) => ({
		_orderIdx: index('post_categories_breadcrumbs_order_idx').on(columns._order),
		_parentIDIdx: index('post_categories_breadcrumbs_parent_id_idx').on(columns._parentID),
		post_categories_breadcrumbs_doc_idx: index('post_categories_breadcrumbs_doc_idx').on(
			columns.doc,
		),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [post_categories.id],
			name: 'post_categories_breadcrumbs_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const post_categories = pgTable(
	'post_categories',
	{
		id: serial('id').primaryKey(),
		title: varchar('title').notNull(),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		parent: integer('parent_id').references((): AnyPgColumn => post_categories.id, {
			onDelete: 'set null',
		}),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		post_categories_slug_idx: index('post_categories_slug_idx').on(columns.slug),
		post_categories_parent_idx: index('post_categories_parent_idx').on(columns.parent),
		post_categories_updated_at_idx: index('post_categories_updated_at_idx').on(columns.updatedAt),
		post_categories_created_at_idx: index('post_categories_created_at_idx').on(columns.createdAt),
	}),
)

export const users = pgTable(
	'users',
	{
		id: serial('id').primaryKey(),
		name: varchar('name'),
		role: enum_users_role('role').notNull(),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		email: varchar('email').notNull(),
		resetPasswordToken: varchar('reset_password_token'),
		resetPasswordExpiration: timestamp('reset_password_expiration', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}),
		salt: varchar('salt'),
		hash: varchar('hash'),
		loginAttempts: numeric('login_attempts').default('0'),
		lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
	},
	(columns) => ({
		users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
		users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
		users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
	}),
)

export const products_blocks_archive = pgTable(
	'products_blocks_archive',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		introContent: jsonb('intro_content'),
		populateBy: enum_products_blocks_archive_populate_by('populate_by').default('collection'),
		relationTo: enum_products_blocks_archive_relation_to('relation_to').default('posts'),
		limit: numeric('limit').default('10'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_archive_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_archive_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_archive_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_archive_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_buy_now = pgTable(
	'products_blocks_buy_now',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		buttonLabel: varchar('button_label').default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_buy_now_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_buy_now_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_buy_now_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_buy_now_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_call_to_add_to_cart = pgTable(
	'products_blocks_call_to_add_to_cart',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		content: jsonb('content'),
		buttonLabel: varchar('button_label').notNull().default('MUA NGAY'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_call_to_add_to_cart_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_call_to_add_to_cart_parent_id_idx').on(
			columns._parentID,
		),
		_pathIdx: index('products_blocks_call_to_add_to_cart_path_idx').on(columns._path),
		products_blocks_call_to_add_to_cart_image_idx: index(
			'products_blocks_call_to_add_to_cart_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_call_to_add_to_cart_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_cta_center = pgTable(
	'products_blocks_cta_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull(),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text').notNull(),
		button_link_type:
			enum_products_blocks_cta_center_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_cta_center_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_cta_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_cta_center_path_idx').on(columns._path),
		products_blocks_cta_center_background_idx: index(
			'products_blocks_cta_center_background_idx',
		).on(columns.background),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_cta_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_cta_left = pgTable(
	'products_blocks_cta_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull(),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		background: integer('background_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		button_text: varchar('button_text').notNull(),
		button_link_type:
			enum_products_blocks_cta_left_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_cta_left_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_cta_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_cta_left_path_idx').on(columns._path),
		products_blocks_cta_left_background_idx: index('products_blocks_cta_left_background_idx').on(
			columns.background,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_cta_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_cta_right_gallery = pgTable(
	'products_blocks_cta_right_gallery',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_cta_right_gallery_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_cta_right_gallery_parent_id_idx').on(columns._parentID),
		products_blocks_cta_right_gallery_image_idx: index(
			'products_blocks_cta_right_gallery_image_idx',
		).on(columns.image),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products_blocks_cta_right.id],
			name: 'products_blocks_cta_right_gallery_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_cta_right = pgTable(
	'products_blocks_cta_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull(),
		'sub-title': varchar('sub_title'),
		description: jsonb('description'),
		button_text: varchar('button_text').notNull(),
		button_link_type:
			enum_products_blocks_cta_right_button_link_type('button_link_type').default('reference'),
		button_link_newTab: boolean('button_link_new_tab'),
		button_link_url: varchar('button_link_url'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_cta_right_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_cta_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_cta_right_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_cta_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_certificates_organizations = pgTable(
	'products_blocks_certificates_organizations',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull(),
		description: varchar('description').notNull(),
		logo: integer('logo_id').references(() => media.id, {
			onDelete: 'set null',
		}),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_certificates_organizations_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_certificates_organizations_parent_id_idx').on(
			columns._parentID,
		),
		products_blocks_certificates_organizations_logo_idx: index(
			'products_blocks_certificates_organizations_logo_idx',
		).on(columns.logo),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products_blocks_certificates.id],
			name: 'products_blocks_certificates_organizations_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_certificates = pgTable(
	'products_blocks_certificates',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull().default('Chứng nhận bởi các tổ chức quốc tế'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_certificates_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_certificates_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_certificates_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_certificates_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_content_columns = pgTable(
	'products_blocks_content_columns',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		size: enum_products_blocks_content_columns_size('size').default('full'),
		font: enum_products_blocks_content_columns_font('font').default('default'),
		customCss: varchar('custom_css').default(''),
		richText: jsonb('rich_text'),
		enableLink: boolean('enable_link'),
		link_type: enum_products_blocks_content_columns_link_type('link_type').default('reference'),
		link_newTab: boolean('link_new_tab'),
		link_url: varchar('link_url'),
		link_label: varchar('link_label'),
		link_appearance:
			enum_products_blocks_content_columns_link_appearance('link_appearance').default('default'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_content_columns_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_content_columns_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products_blocks_content.id],
			name: 'products_blocks_content_columns_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_content = pgTable(
	'products_blocks_content',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_content_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_content_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_content_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_content_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_form_block = pgTable(
	'products_blocks_form_block',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		form: integer('form_id')
			.notNull()
			.references(() => forms.id, {
				onDelete: 'set null',
			}),
		enableIntro: boolean('enable_intro'),
		introContent: jsonb('intro_content'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_form_block_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_form_block_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_form_block_path_idx').on(columns._path),
		products_blocks_form_block_form_idx: index('products_blocks_form_block_form_idx').on(
			columns.form,
		),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_form_block_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_highlight_center = pgTable(
	'products_blocks_highlight_center',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order').notNull(),
		title: varchar('title').notNull(),
		description: varchar('description').notNull(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_highlight_center_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_highlight_center_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_highlight_center_path_idx').on(columns._path),
		products_blocks_highlight_center_image_idx: index(
			'products_blocks_highlight_center_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_highlight_center_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_highlight_left = pgTable(
	'products_blocks_highlight_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order').notNull(),
		title: varchar('title').notNull(),
		description: varchar('description').notNull(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_highlight_left_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_highlight_left_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_highlight_left_path_idx').on(columns._path),
		products_blocks_highlight_left_image_idx: index(
			'products_blocks_highlight_left_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_highlight_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_highlight_right = pgTable(
	'products_blocks_highlight_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		order: numeric('order').notNull(),
		title: varchar('title').notNull(),
		description: varchar('description').notNull(),
		image: integer('image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_highlight_right_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_highlight_right_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_highlight_right_path_idx').on(columns._path),
		products_blocks_highlight_right_image_idx: index(
			'products_blocks_highlight_right_image_idx',
		).on(columns.image),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_highlight_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_infinite_scroll = pgTable(
	'products_blocks_infinite_scroll',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		graphic: integer('graphic_id')
			.notNull()
			.references(() => media.id, {
				onDelete: 'set null',
			}),
		animationDuration: numeric('animation_duration').default('5'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_infinite_scroll_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_infinite_scroll_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_infinite_scroll_path_idx').on(columns._path),
		products_blocks_infinite_scroll_graphic_idx: index(
			'products_blocks_infinite_scroll_graphic_idx',
		).on(columns.graphic),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_infinite_scroll_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_latest_posts = pgTable(
	'products_blocks_latest_posts',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		title: varchar('title').notNull().default('Bài viết mới nhất'),
		buttonLabel: varchar('button_label').notNull().default('TẤT CẢ BÀI VIẾT'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_latest_posts_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_latest_posts_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_latest_posts_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_latest_posts_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_media = pgTable(
	'products_blocks_media',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		media: integer('media_id')
			.notNull()
			.references(() => media.id, {
				onDelete: 'set null',
			}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_media_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_media_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_media_path_idx').on(columns._path),
		products_blocks_media_media_idx: index('products_blocks_media_media_idx').on(columns.media),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_media_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_products_carousel = pgTable(
	'products_blocks_products_carousel',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_products_carousel_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_products_carousel_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_products_carousel_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_products_carousel_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products_blocks_three_photo = pgTable(
	'products_blocks_three_photo',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		photoLeft: integer('photo_left_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoCenter: integer('photo_center_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		photoRight: integer('photo_right_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('products_blocks_three_photo_order_idx').on(columns._order),
		_parentIDIdx: index('products_blocks_three_photo_parent_id_idx').on(columns._parentID),
		_pathIdx: index('products_blocks_three_photo_path_idx').on(columns._path),
		products_blocks_three_photo_photo_left_idx: index(
			'products_blocks_three_photo_photo_left_idx',
		).on(columns.photoLeft),
		products_blocks_three_photo_photo_center_idx: index(
			'products_blocks_three_photo_photo_center_idx',
		).on(columns.photoCenter),
		products_blocks_three_photo_photo_right_idx: index(
			'products_blocks_three_photo_photo_right_idx',
		).on(columns.photoRight),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [products.id],
			name: 'products_blocks_three_photo_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const products = pgTable(
	'products',
	{
		id: serial('id').primaryKey(),
		title: varchar('title').notNull(),
		shortDescription: varchar('short_description').notNull(),
		longDescription: varchar('long_description'),
		price: numeric('price').notNull(),
		heroTitle: varchar('hero_title'),
		heroSubtitle: varchar('hero_subtitle'),
		heroDescription: jsonb('hero_description'),
		heroMedia: integer('hero_media_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_title: varchar('meta_title'),
		meta_image: integer('meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		meta_description: varchar('meta_description'),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		products_hero_media_idx: index('products_hero_media_idx').on(columns.heroMedia),
		products_meta_meta_image_idx: index('products_meta_meta_image_idx').on(columns.meta_image),
		products_slug_idx: index('products_slug_idx').on(columns.slug),
		products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
		products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
	}),
)

export const products_rels = pgTable(
	'products_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		postCategoriesID: integer('post_categories_id'),
		productSubCategoriesID: integer('product_sub_categories_id'),
		mediaID: integer('media_id'),
		postsID: integer('posts_id'),
		pagesID: integer('pages_id'),
		productsID: integer('products_id'),
	},
	(columns) => ({
		order: index('products_rels_order_idx').on(columns.order),
		parentIdx: index('products_rels_parent_idx').on(columns.parent),
		pathIdx: index('products_rels_path_idx').on(columns.path),
		products_rels_post_categories_id_idx: index('products_rels_post_categories_id_idx').on(
			columns.postCategoriesID,
		),
		products_rels_product_sub_categories_id_idx: index(
			'products_rels_product_sub_categories_id_idx',
		).on(columns.productSubCategoriesID),
		products_rels_media_id_idx: index('products_rels_media_id_idx').on(columns.mediaID),
		products_rels_posts_id_idx: index('products_rels_posts_id_idx').on(columns.postsID),
		products_rels_pages_id_idx: index('products_rels_pages_id_idx').on(columns.pagesID),
		products_rels_products_id_idx: index('products_rels_products_id_idx').on(columns.productsID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [products.id],
			name: 'products_rels_parent_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: 'products_rels_post_categories_fk',
		}).onDelete('cascade'),
		productSubCategoriesIdFk: foreignKey({
			columns: [columns['productSubCategoriesID']],
			foreignColumns: [product_sub_categories.id],
			name: 'products_rels_product_sub_categories_fk',
		}).onDelete('cascade'),
		mediaIdFk: foreignKey({
			columns: [columns['mediaID']],
			foreignColumns: [media.id],
			name: 'products_rels_media_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'products_rels_posts_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'products_rels_pages_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: 'products_rels_products_fk',
		}).onDelete('cascade'),
	}),
)

export const product_categories = pgTable(
	'product_categories',
	{
		id: serial('id').primaryKey(),
		title: varchar('title').notNull(),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		product_categories_slug_idx: index('product_categories_slug_idx').on(columns.slug),
		product_categories_updated_at_idx: index('product_categories_updated_at_idx').on(
			columns.updatedAt,
		),
		product_categories_created_at_idx: index('product_categories_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const product_sub_categories = pgTable(
	'product_sub_categories',
	{
		id: serial('id').primaryKey(),
		category: integer('category_id')
			.notNull()
			.references(() => product_categories.id, {
				onDelete: 'set null',
			}),
		title: varchar('title').notNull(),
		slug: varchar('slug'),
		slugLock: boolean('slug_lock').default(true),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		product_sub_categories_category_idx: index('product_sub_categories_category_idx').on(
			columns.category,
		),
		product_sub_categories_slug_idx: index('product_sub_categories_slug_idx').on(columns.slug),
		product_sub_categories_updated_at_idx: index('product_sub_categories_updated_at_idx').on(
			columns.updatedAt,
		),
		product_sub_categories_created_at_idx: index('product_sub_categories_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const redirects = pgTable(
	'redirects',
	{
		id: serial('id').primaryKey(),
		from: varchar('from').notNull(),
		to_type: enum_redirects_to_type('to_type').default('reference'),
		to_url: varchar('to_url'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		redirects_from_idx: index('redirects_from_idx').on(columns.from),
		redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
		redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
	}),
)

export const redirects_rels = pgTable(
	'redirects_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		pagesID: integer('pages_id'),
		postsID: integer('posts_id'),
	},
	(columns) => ({
		order: index('redirects_rels_order_idx').on(columns.order),
		parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
		pathIdx: index('redirects_rels_path_idx').on(columns.path),
		redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
		redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [redirects.id],
			name: 'redirects_rels_parent_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'redirects_rels_pages_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'redirects_rels_posts_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_checkbox = pgTable(
	'forms_blocks_checkbox',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		required: boolean('required'),
		defaultValue: boolean('default_value'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_checkbox_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_country = pgTable(
	'forms_blocks_country',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_country_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_email = pgTable(
	'forms_blocks_email',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_email_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_message = pgTable(
	'forms_blocks_message',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		message: jsonb('message'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_message_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_number = pgTable(
	'forms_blocks_number',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		defaultValue: numeric('default_value'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_number_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_select_options = pgTable(
	'forms_blocks_select_options',
	{
		_order: integer('_order').notNull(),
		_parentID: varchar('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		label: varchar('label').notNull(),
		value: varchar('value').notNull(),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms_blocks_select.id],
			name: 'forms_blocks_select_options_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_select = pgTable(
	'forms_blocks_select',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		defaultValue: varchar('default_value'),
		placeholder: varchar('placeholder'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_select_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_state = pgTable(
	'forms_blocks_state',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_state_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_text = pgTable(
	'forms_blocks_text',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		defaultValue: varchar('default_value'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_text_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_blocks_textarea = pgTable(
	'forms_blocks_textarea',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		_path: text('_path').notNull(),
		id: varchar('id').primaryKey(),
		name: varchar('name').notNull(),
		label: varchar('label'),
		width: numeric('width'),
		defaultValue: varchar('default_value'),
		required: boolean('required'),
		blockName: varchar('block_name'),
	},
	(columns) => ({
		_orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
		_parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
		_pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
		_parentIdFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_blocks_textarea_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms_emails = pgTable(
	'forms_emails',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		emailTo: varchar('email_to'),
		cc: varchar('cc'),
		bcc: varchar('bcc'),
		replyTo: varchar('reply_to'),
		emailFrom: varchar('email_from'),
		subject: varchar('subject').notNull().default("You''ve received a new message."),
		message: jsonb('message'),
	},
	(columns) => ({
		_orderIdx: index('forms_emails_order_idx').on(columns._order),
		_parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [forms.id],
			name: 'forms_emails_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const forms = pgTable(
	'forms',
	{
		id: serial('id').primaryKey(),
		title: varchar('title').notNull(),
		submitButtonLabel: varchar('submit_button_label'),
		confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
		confirmationMessage: jsonb('confirmation_message'),
		redirect_url: varchar('redirect_url'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
		forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
	}),
)

export const form_submissions_submission_data = pgTable(
	'form_submissions_submission_data',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		field: varchar('field').notNull(),
		value: varchar('value').notNull(),
	},
	(columns) => ({
		_orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
		_parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [form_submissions.id],
			name: 'form_submissions_submission_data_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const form_submissions = pgTable(
	'form_submissions',
	{
		id: serial('id').primaryKey(),
		form: integer('form_id')
			.notNull()
			.references(() => forms.id, {
				onDelete: 'set null',
			}),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
		form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(
			columns.updatedAt,
		),
		form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const search_categories = pgTable(
	'search_categories',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		relationTo: varchar('relation_to'),
		title: varchar('title'),
	},
	(columns) => ({
		_orderIdx: index('search_categories_order_idx').on(columns._order),
		_parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [search.id],
			name: 'search_categories_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const search = pgTable(
	'search',
	{
		id: serial('id').primaryKey(),
		title: varchar('title'),
		priority: numeric('priority'),
		slug: varchar('slug'),
		meta_title: varchar('meta_title'),
		meta_description: varchar('meta_description'),
		meta_image: integer('meta_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		search_slug_idx: index('search_slug_idx').on(columns.slug),
		search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
		search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
		search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
	}),
)

export const search_rels = pgTable(
	'search_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		postsID: integer('posts_id'),
	},
	(columns) => ({
		order: index('search_rels_order_idx').on(columns.order),
		parentIdx: index('search_rels_parent_idx').on(columns.parent),
		pathIdx: index('search_rels_path_idx').on(columns.path),
		search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [search.id],
			name: 'search_rels_parent_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'search_rels_posts_fk',
		}).onDelete('cascade'),
	}),
)

export const payload_jobs_log = pgTable(
	'payload_jobs_log',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		executedAt: timestamp('executed_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}).notNull(),
		completedAt: timestamp('completed_at', {
			mode: 'string',
			withTimezone: true,
			precision: 3,
		}).notNull(),
		taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
		taskID: varchar('task_i_d').notNull(),
		input: jsonb('input'),
		output: jsonb('output'),
		state: enum_payload_jobs_log_state('state').notNull(),
		error: jsonb('error'),
	},
	(columns) => ({
		_orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
		_parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [payload_jobs.id],
			name: 'payload_jobs_log_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const payload_jobs = pgTable(
	'payload_jobs',
	{
		id: serial('id').primaryKey(),
		input: jsonb('input'),
		completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
		totalTried: numeric('total_tried').default('0'),
		hasError: boolean('has_error').default(false),
		error: jsonb('error'),
		taskSlug: enum_payload_jobs_task_slug('task_slug'),
		queue: varchar('queue').default('default'),
		waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
		processing: boolean('processing').default(false),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
		payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
		payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
		payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
		payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
		payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
		payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
		payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
		payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
	}),
)

export const payload_locked_documents = pgTable(
	'payload_locked_documents',
	{
		id: serial('id').primaryKey(),
		globalSlug: varchar('global_slug'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		payload_locked_documents_global_slug_idx: index(
			'payload_locked_documents_global_slug_idx',
		).on(columns.globalSlug),
		payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
			columns.updatedAt,
		),
		payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const payload_locked_documents_rels = pgTable(
	'payload_locked_documents_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		pagesID: integer('pages_id'),
		postsID: integer('posts_id'),
		mediaID: integer('media_id'),
		postCategoriesID: integer('post_categories_id'),
		usersID: integer('users_id'),
		productsID: integer('products_id'),
		productCategoriesID: integer('product_categories_id'),
		productSubCategoriesID: integer('product_sub_categories_id'),
		redirectsID: integer('redirects_id'),
		formsID: integer('forms_id'),
		'form-submissionsID': integer('form_submissions_id'),
		searchID: integer('search_id'),
		'payload-jobsID': integer('payload_jobs_id'),
	},
	(columns) => ({
		order: index('payload_locked_documents_rels_order_idx').on(columns.order),
		parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
		pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
		payload_locked_documents_rels_pages_id_idx: index(
			'payload_locked_documents_rels_pages_id_idx',
		).on(columns.pagesID),
		payload_locked_documents_rels_posts_id_idx: index(
			'payload_locked_documents_rels_posts_id_idx',
		).on(columns.postsID),
		payload_locked_documents_rels_media_id_idx: index(
			'payload_locked_documents_rels_media_id_idx',
		).on(columns.mediaID),
		payload_locked_documents_rels_post_categories_id_idx: index(
			'payload_locked_documents_rels_post_categories_id_idx',
		).on(columns.postCategoriesID),
		payload_locked_documents_rels_users_id_idx: index(
			'payload_locked_documents_rels_users_id_idx',
		).on(columns.usersID),
		payload_locked_documents_rels_products_id_idx: index(
			'payload_locked_documents_rels_products_id_idx',
		).on(columns.productsID),
		payload_locked_documents_rels_product_categories_id_idx: index(
			'payload_locked_documents_rels_product_categories_id_idx',
		).on(columns.productCategoriesID),
		payload_locked_documents_rels_product_sub_categories_id_idx: index(
			'payload_locked_documents_rels_product_sub_categories_id_idx',
		).on(columns.productSubCategoriesID),
		payload_locked_documents_rels_redirects_id_idx: index(
			'payload_locked_documents_rels_redirects_id_idx',
		).on(columns.redirectsID),
		payload_locked_documents_rels_forms_id_idx: index(
			'payload_locked_documents_rels_forms_id_idx',
		).on(columns.formsID),
		payload_locked_documents_rels_form_submissions_id_idx: index(
			'payload_locked_documents_rels_form_submissions_id_idx',
		).on(columns['form-submissionsID']),
		payload_locked_documents_rels_search_id_idx: index(
			'payload_locked_documents_rels_search_id_idx',
		).on(columns.searchID),
		payload_locked_documents_rels_payload_jobs_id_idx: index(
			'payload_locked_documents_rels_payload_jobs_id_idx',
		).on(columns['payload-jobsID']),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [payload_locked_documents.id],
			name: 'payload_locked_documents_rels_parent_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'payload_locked_documents_rels_pages_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'payload_locked_documents_rels_posts_fk',
		}).onDelete('cascade'),
		mediaIdFk: foreignKey({
			columns: [columns['mediaID']],
			foreignColumns: [media.id],
			name: 'payload_locked_documents_rels_media_fk',
		}).onDelete('cascade'),
		postCategoriesIdFk: foreignKey({
			columns: [columns['postCategoriesID']],
			foreignColumns: [post_categories.id],
			name: 'payload_locked_documents_rels_post_categories_fk',
		}).onDelete('cascade'),
		usersIdFk: foreignKey({
			columns: [columns['usersID']],
			foreignColumns: [users.id],
			name: 'payload_locked_documents_rels_users_fk',
		}).onDelete('cascade'),
		productsIdFk: foreignKey({
			columns: [columns['productsID']],
			foreignColumns: [products.id],
			name: 'payload_locked_documents_rels_products_fk',
		}).onDelete('cascade'),
		productCategoriesIdFk: foreignKey({
			columns: [columns['productCategoriesID']],
			foreignColumns: [product_categories.id],
			name: 'payload_locked_documents_rels_product_categories_fk',
		}).onDelete('cascade'),
		productSubCategoriesIdFk: foreignKey({
			columns: [columns['productSubCategoriesID']],
			foreignColumns: [product_sub_categories.id],
			name: 'payload_locked_documents_rels_product_sub_categories_fk',
		}).onDelete('cascade'),
		redirectsIdFk: foreignKey({
			columns: [columns['redirectsID']],
			foreignColumns: [redirects.id],
			name: 'payload_locked_documents_rels_redirects_fk',
		}).onDelete('cascade'),
		formsIdFk: foreignKey({
			columns: [columns['formsID']],
			foreignColumns: [forms.id],
			name: 'payload_locked_documents_rels_forms_fk',
		}).onDelete('cascade'),
		'form-submissionsIdFk': foreignKey({
			columns: [columns['form-submissionsID']],
			foreignColumns: [form_submissions.id],
			name: 'payload_locked_documents_rels_form_submissions_fk',
		}).onDelete('cascade'),
		searchIdFk: foreignKey({
			columns: [columns['searchID']],
			foreignColumns: [search.id],
			name: 'payload_locked_documents_rels_search_fk',
		}).onDelete('cascade'),
		'payload-jobsIdFk': foreignKey({
			columns: [columns['payload-jobsID']],
			foreignColumns: [payload_jobs.id],
			name: 'payload_locked_documents_rels_payload_jobs_fk',
		}).onDelete('cascade'),
	}),
)

export const payload_preferences = pgTable(
	'payload_preferences',
	{
		id: serial('id').primaryKey(),
		key: varchar('key'),
		value: jsonb('value'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
		payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
			columns.updatedAt,
		),
		payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const payload_preferences_rels = pgTable(
	'payload_preferences_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		usersID: integer('users_id'),
	},
	(columns) => ({
		order: index('payload_preferences_rels_order_idx').on(columns.order),
		parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
		pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
		payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
			columns.usersID,
		),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [payload_preferences.id],
			name: 'payload_preferences_rels_parent_fk',
		}).onDelete('cascade'),
		usersIdFk: foreignKey({
			columns: [columns['usersID']],
			foreignColumns: [users.id],
			name: 'payload_preferences_rels_users_fk',
		}).onDelete('cascade'),
	}),
)

export const payload_migrations = pgTable(
	'payload_migrations',
	{
		id: serial('id').primaryKey(),
		name: varchar('name'),
		batch: numeric('batch'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
			.defaultNow()
			.notNull(),
	},
	(columns) => ({
		payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
			columns.updatedAt,
		),
		payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
			columns.createdAt,
		),
	}),
)

export const header_nav_items_left = pgTable(
	'header_nav_items_left',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		item: enum_header_nav_items_left_item('item'),
	},
	(columns) => ({
		_orderIdx: index('header_nav_items_left_order_idx').on(columns._order),
		_parentIDIdx: index('header_nav_items_left_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [header.id],
			name: 'header_nav_items_left_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const header_nav_items_right = pgTable(
	'header_nav_items_right',
	{
		_order: integer('_order').notNull(),
		_parentID: integer('_parent_id').notNull(),
		id: varchar('id').primaryKey(),
		item: enum_header_nav_items_right_item('item'),
	},
	(columns) => ({
		_orderIdx: index('header_nav_items_right_order_idx').on(columns._order),
		_parentIDIdx: index('header_nav_items_right_parent_id_idx').on(columns._parentID),
		_parentIDFk: foreignKey({
			columns: [columns['_parentID']],
			foreignColumns: [header.id],
			name: 'header_nav_items_right_parent_id_fk',
		}).onDelete('cascade'),
	}),
)

export const header = pgTable('header', {
	id: serial('id').primaryKey(),
	updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
	createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer = pgTable(
	'footer',
	{
		id: serial('id').primaryKey(),
		image_image: integer('image_image_id').references(() => media.id, {
			onDelete: 'set null',
		}),
		contactUs_title: varchar('contact_us_title')
			.notNull()
			.default('Đăng kí để nhận thông tin khuyến mãi sớm nhất từ BioLAK'),
		contactUs_emailInputLabel: varchar('contact_us_email_input_label')
			.notNull()
			.default('Nhập địa chỉ Email'),
		contactUs_description: varchar('contact_us_description')
			.notNull()
			.default(
				'Đăng kí để nhận thông tin liên lạc về các sản phẩm, dịch vụ, cửa hàng, sự kiện và các vấn đề đáng quan tâm của BioLAK.',
			),
		legal_title: varchar('legal_title')
			.notNull()
			.default('Website thuộc quyền của công ty trách nhiệm hữu hạn ELAK'),
		legal_content: varchar('legal_content')
			.notNull()
			.default(
				'GCNDKKD 0107874681 | Sở kế hoạch và đầu tư TP. Hà Nội\ncấp ngày 05/06/2017,\nđăng ký thay đổi lần 2 ngày 12/01/2024\nĐịa chỉ: Xóm 5 thôn Long Phú, xã Hòa Thạch, huyện Quốc Oai,\nTP Hà Nội, Việt Nam.\nĐiện thoại: 0983335596 - Email: info@biolak.vn',
			),
		legal_stamp: integer('legal_stamp_id')
			.notNull()
			.references(() => media.id, {
				onDelete: 'set null',
			}),
		legal_copyright: varchar('legal_copyright')
			.notNull()
			.default('© 2025 BioLAK Vietnam. All rights reserved.'),
		updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
		createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
	},
	(columns) => ({
		footer_image_image_image_idx: index('footer_image_image_image_idx').on(columns.image_image),
		footer_legal_legal_stamp_idx: index('footer_legal_legal_stamp_idx').on(columns.legal_stamp),
	}),
)

export const promo = pgTable('promo', {
	id: serial('id').primaryKey(),
	message: varchar('message').default(''),
	link_type: enum_promo_link_type('link_type').default('reference'),
	link_newTab: boolean('link_new_tab'),
	link_url: varchar('link_url'),
	link_label: varchar('link_label').notNull(),
	updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
	createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const promo_rels = pgTable(
	'promo_rels',
	{
		id: serial('id').primaryKey(),
		order: integer('order'),
		parent: integer('parent_id').notNull(),
		path: varchar('path').notNull(),
		pagesID: integer('pages_id'),
		postsID: integer('posts_id'),
	},
	(columns) => ({
		order: index('promo_rels_order_idx').on(columns.order),
		parentIdx: index('promo_rels_parent_idx').on(columns.parent),
		pathIdx: index('promo_rels_path_idx').on(columns.path),
		promo_rels_pages_id_idx: index('promo_rels_pages_id_idx').on(columns.pagesID),
		promo_rels_posts_id_idx: index('promo_rels_posts_id_idx').on(columns.postsID),
		parentFk: foreignKey({
			columns: [columns['parent']],
			foreignColumns: [promo.id],
			name: 'promo_rels_parent_fk',
		}).onDelete('cascade'),
		pagesIdFk: foreignKey({
			columns: [columns['pagesID']],
			foreignColumns: [pages.id],
			name: 'promo_rels_pages_fk',
		}).onDelete('cascade'),
		postsIdFk: foreignKey({
			columns: [columns['postsID']],
			foreignColumns: [posts.id],
			name: 'promo_rels_posts_fk',
		}).onDelete('cascade'),
	}),
)

export const contact_form = pgTable('contact_form', {
	id: serial('id').primaryKey(),
	title: varchar('title').notNull().default('Liên hệ với BioLAK'),
	name: varchar('name').notNull().default('Nhập tên của bạn'),
	phoneNumber: varchar('phone_number').notNull().default('Nhập số điện thoại'),
	email: varchar('email').notNull().default('Nhập địa chỉ email'),
	question: varchar('question').notNull().default('Câu hỏi của bạn tới chúng tôi'),
	actionSend: varchar('action_send').notNull().default('GỬI BIOLAK'),
	biolakPhoneNumber: varchar('biolak_phone_number').default('0987654321'),
	actionCall: varchar('action_call').notNull().default('GỌI BIOLAK'),
	updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
	createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_hero_links._parentID],
		references: [pages.id],
		relationName: 'hero_links',
	}),
}))
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_archive._parentID],
		references: [pages.id],
		relationName: '_blocks_archive',
	}),
}))
export const relations_pages_blocks_banner = relations(pages_blocks_banner, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_banner._parentID],
		references: [pages.id],
		relationName: '_blocks_banner',
	}),
}))
export const relations_pages_blocks_best_seller = relations(
	pages_blocks_best_seller,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_best_seller._parentID],
			references: [pages.id],
			relationName: '_blocks_bestSeller',
		}),
	}),
)
export const relations_pages_blocks_buy_now = relations(pages_blocks_buy_now, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_buy_now._parentID],
		references: [pages.id],
		relationName: '_blocks_buy-now',
	}),
}))
export const relations_pages_blocks_call_to_add_to_cart = relations(
	pages_blocks_call_to_add_to_cart,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_call_to_add_to_cart._parentID],
			references: [pages.id],
			relationName: '_blocks_call-to-add-to-cart',
		}),
		image: one(media, {
			fields: [pages_blocks_call_to_add_to_cart.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_pages_blocks_cta_center = relations(pages_blocks_cta_center, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_cta_center._parentID],
		references: [pages.id],
		relationName: '_blocks_cta-center',
	}),
	background: one(media, {
		fields: [pages_blocks_cta_center.background],
		references: [media.id],
		relationName: 'background',
	}),
}))
export const relations_pages_blocks_cta_left = relations(pages_blocks_cta_left, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_cta_left._parentID],
		references: [pages.id],
		relationName: '_blocks_cta-left',
	}),
	background: one(media, {
		fields: [pages_blocks_cta_left.background],
		references: [media.id],
		relationName: 'background',
	}),
}))
export const relations_pages_blocks_cta_right_gallery = relations(
	pages_blocks_cta_right_gallery,
	({ one }) => ({
		_parentID: one(pages_blocks_cta_right, {
			fields: [pages_blocks_cta_right_gallery._parentID],
			references: [pages_blocks_cta_right.id],
			relationName: 'gallery',
		}),
		image: one(media, {
			fields: [pages_blocks_cta_right_gallery.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_pages_blocks_cta_right = relations(
	pages_blocks_cta_right,
	({ one, many }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_cta_right._parentID],
			references: [pages.id],
			relationName: '_blocks_cta-right',
		}),
		gallery: many(pages_blocks_cta_right_gallery, {
			relationName: 'gallery',
		}),
	}),
)
export const relations_pages_blocks_call_to_action_post = relations(
	pages_blocks_call_to_action_post,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_call_to_action_post._parentID],
			references: [pages.id],
			relationName: '_blocks_call-to-action-post',
		}),
		post: one(posts, {
			fields: [pages_blocks_call_to_action_post.post],
			references: [posts.id],
			relationName: 'post',
		}),
	}),
)
export const relations_pages_blocks_certificates_organizations = relations(
	pages_blocks_certificates_organizations,
	({ one }) => ({
		_parentID: one(pages_blocks_certificates, {
			fields: [pages_blocks_certificates_organizations._parentID],
			references: [pages_blocks_certificates.id],
			relationName: 'organizations',
		}),
		logo: one(media, {
			fields: [pages_blocks_certificates_organizations.logo],
			references: [media.id],
			relationName: 'logo',
		}),
	}),
)
export const relations_pages_blocks_certificates = relations(
	pages_blocks_certificates,
	({ one, many }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_certificates._parentID],
			references: [pages.id],
			relationName: '_blocks_certificates',
		}),
		organizations: many(pages_blocks_certificates_organizations, {
			relationName: 'organizations',
		}),
	}),
)
export const relations_pages_blocks_content_columns = relations(
	pages_blocks_content_columns,
	({ one }) => ({
		_parentID: one(pages_blocks_content, {
			fields: [pages_blocks_content_columns._parentID],
			references: [pages_blocks_content.id],
			relationName: 'columns',
		}),
	}),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_content._parentID],
		references: [pages.id],
		relationName: '_blocks_content',
	}),
	columns: many(pages_blocks_content_columns, {
		relationName: 'columns',
	}),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_form_block._parentID],
		references: [pages.id],
		relationName: '_blocks_formBlock',
	}),
	form: one(forms, {
		fields: [pages_blocks_form_block.form],
		references: [forms.id],
		relationName: 'form',
	}),
}))
export const relations_pages_blocks_highlight_center = relations(
	pages_blocks_highlight_center,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_highlight_center._parentID],
			references: [pages.id],
			relationName: '_blocks_highlight-center',
		}),
		image: one(media, {
			fields: [pages_blocks_highlight_center.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_pages_blocks_highlight_left = relations(
	pages_blocks_highlight_left,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_highlight_left._parentID],
			references: [pages.id],
			relationName: '_blocks_highlight-left',
		}),
		image: one(media, {
			fields: [pages_blocks_highlight_left.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_pages_blocks_highlight_right = relations(
	pages_blocks_highlight_right,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_highlight_right._parentID],
			references: [pages.id],
			relationName: '_blocks_highlight-right',
		}),
		image: one(media, {
			fields: [pages_blocks_highlight_right.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_pages_blocks_infinite_scroll = relations(
	pages_blocks_infinite_scroll,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_infinite_scroll._parentID],
			references: [pages.id],
			relationName: '_blocks_infiniteScroll',
		}),
		graphic: one(media, {
			fields: [pages_blocks_infinite_scroll.graphic],
			references: [media.id],
			relationName: 'graphic',
		}),
	}),
)
export const relations_pages_blocks_latest_posts = relations(
	pages_blocks_latest_posts,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_latest_posts._parentID],
			references: [pages.id],
			relationName: '_blocks_latestPosts',
		}),
	}),
)
export const relations_pages_blocks_media = relations(pages_blocks_media, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_media._parentID],
		references: [pages.id],
		relationName: '_blocks_media',
	}),
	media: one(media, {
		fields: [pages_blocks_media.media],
		references: [media.id],
		relationName: 'media',
	}),
}))
export const relations_pages_blocks_posts_grid = relations(pages_blocks_posts_grid, ({ one }) => ({
	_parentID: one(pages, {
		fields: [pages_blocks_posts_grid._parentID],
		references: [pages.id],
		relationName: '_blocks_posts-grid',
	}),
}))
export const relations_pages_blocks_products_carousel = relations(
	pages_blocks_products_carousel,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_products_carousel._parentID],
			references: [pages.id],
			relationName: '_blocks_productsCarousel',
		}),
	}),
)
export const relations_pages_blocks_products_category_products = relations(
	pages_blocks_products_category_products,
	({ one }) => ({
		_parentID: one(pages_blocks_products_category, {
			fields: [pages_blocks_products_category_products._parentID],
			references: [pages_blocks_products_category.id],
			relationName: 'products',
		}),
		product: one(products, {
			fields: [pages_blocks_products_category_products.product],
			references: [products.id],
			relationName: 'product',
		}),
	}),
)
export const relations_pages_blocks_products_category = relations(
	pages_blocks_products_category,
	({ one, many }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_products_category._parentID],
			references: [pages.id],
			relationName: '_blocks_productsCategory',
		}),
		products: many(pages_blocks_products_category_products, {
			relationName: 'products',
		}),
	}),
)
export const relations_pages_blocks_three_photo = relations(
	pages_blocks_three_photo,
	({ one }) => ({
		_parentID: one(pages, {
			fields: [pages_blocks_three_photo._parentID],
			references: [pages.id],
			relationName: '_blocks_threePhoto',
		}),
		photoLeft: one(media, {
			fields: [pages_blocks_three_photo.photoLeft],
			references: [media.id],
			relationName: 'photoLeft',
		}),
		photoCenter: one(media, {
			fields: [pages_blocks_three_photo.photoCenter],
			references: [media.id],
			relationName: 'photoCenter',
		}),
		photoRight: one(media, {
			fields: [pages_blocks_three_photo.photoRight],
			references: [media.id],
			relationName: 'photoRight',
		}),
	}),
)
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
	parent: one(pages, {
		fields: [pages_rels.parent],
		references: [pages.id],
		relationName: '_rels',
	}),
	pagesID: one(pages, {
		fields: [pages_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	postsID: one(posts, {
		fields: [pages_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
	postCategoriesID: one(post_categories, {
		fields: [pages_rels.postCategoriesID],
		references: [post_categories.id],
		relationName: 'postCategories',
	}),
	productsID: one(products, {
		fields: [pages_rels.productsID],
		references: [products.id],
		relationName: 'products',
	}),
	productCategoriesID: one(product_categories, {
		fields: [pages_rels.productCategoriesID],
		references: [product_categories.id],
		relationName: 'productCategories',
	}),
	productSubCategoriesID: one(product_sub_categories, {
		fields: [pages_rels.productSubCategoriesID],
		references: [product_sub_categories.id],
		relationName: 'productSubCategories',
	}),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
	hero_links: many(pages_hero_links, {
		relationName: 'hero_links',
	}),
	hero_media: one(media, {
		fields: [pages.hero_media],
		references: [media.id],
		relationName: 'hero_media',
	}),
	_blocks_archive: many(pages_blocks_archive, {
		relationName: '_blocks_archive',
	}),
	_blocks_banner: many(pages_blocks_banner, {
		relationName: '_blocks_banner',
	}),
	_blocks_bestSeller: many(pages_blocks_best_seller, {
		relationName: '_blocks_bestSeller',
	}),
	'_blocks_buy-now': many(pages_blocks_buy_now, {
		relationName: '_blocks_buy-now',
	}),
	'_blocks_call-to-add-to-cart': many(pages_blocks_call_to_add_to_cart, {
		relationName: '_blocks_call-to-add-to-cart',
	}),
	'_blocks_cta-center': many(pages_blocks_cta_center, {
		relationName: '_blocks_cta-center',
	}),
	'_blocks_cta-left': many(pages_blocks_cta_left, {
		relationName: '_blocks_cta-left',
	}),
	'_blocks_cta-right': many(pages_blocks_cta_right, {
		relationName: '_blocks_cta-right',
	}),
	'_blocks_call-to-action-post': many(pages_blocks_call_to_action_post, {
		relationName: '_blocks_call-to-action-post',
	}),
	_blocks_certificates: many(pages_blocks_certificates, {
		relationName: '_blocks_certificates',
	}),
	_blocks_content: many(pages_blocks_content, {
		relationName: '_blocks_content',
	}),
	_blocks_formBlock: many(pages_blocks_form_block, {
		relationName: '_blocks_formBlock',
	}),
	'_blocks_highlight-center': many(pages_blocks_highlight_center, {
		relationName: '_blocks_highlight-center',
	}),
	'_blocks_highlight-left': many(pages_blocks_highlight_left, {
		relationName: '_blocks_highlight-left',
	}),
	'_blocks_highlight-right': many(pages_blocks_highlight_right, {
		relationName: '_blocks_highlight-right',
	}),
	_blocks_infiniteScroll: many(pages_blocks_infinite_scroll, {
		relationName: '_blocks_infiniteScroll',
	}),
	_blocks_latestPosts: many(pages_blocks_latest_posts, {
		relationName: '_blocks_latestPosts',
	}),
	_blocks_media: many(pages_blocks_media, {
		relationName: '_blocks_media',
	}),
	'_blocks_posts-grid': many(pages_blocks_posts_grid, {
		relationName: '_blocks_posts-grid',
	}),
	_blocks_productsCarousel: many(pages_blocks_products_carousel, {
		relationName: '_blocks_productsCarousel',
	}),
	_blocks_productsCategory: many(pages_blocks_products_category, {
		relationName: '_blocks_productsCategory',
	}),
	_blocks_threePhoto: many(pages_blocks_three_photo, {
		relationName: '_blocks_threePhoto',
	}),
	meta_meta_image: one(media, {
		fields: [pages.meta_meta_image],
		references: [media.id],
		relationName: 'meta_meta_image',
	}),
	_rels: many(pages_rels, {
		relationName: '_rels',
	}),
}))
export const relations__pages_v_version_hero_links = relations(
	_pages_v_version_hero_links,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_version_hero_links._parentID],
			references: [_pages_v.id],
			relationName: 'version_hero_links',
		}),
	}),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
	_parentID: one(_pages_v, {
		fields: [_pages_v_blocks_archive._parentID],
		references: [_pages_v.id],
		relationName: '_blocks_archive',
	}),
}))
export const relations__pages_v_blocks_banner = relations(_pages_v_blocks_banner, ({ one }) => ({
	_parentID: one(_pages_v, {
		fields: [_pages_v_blocks_banner._parentID],
		references: [_pages_v.id],
		relationName: '_blocks_banner',
	}),
}))
export const relations__pages_v_blocks_best_seller = relations(
	_pages_v_blocks_best_seller,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_best_seller._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_bestSeller',
		}),
	}),
)
export const relations__pages_v_blocks_buy_now = relations(_pages_v_blocks_buy_now, ({ one }) => ({
	_parentID: one(_pages_v, {
		fields: [_pages_v_blocks_buy_now._parentID],
		references: [_pages_v.id],
		relationName: '_blocks_buy-now',
	}),
}))
export const relations__pages_v_blocks_call_to_add_to_cart = relations(
	_pages_v_blocks_call_to_add_to_cart,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_call_to_add_to_cart._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_call-to-add-to-cart',
		}),
		image: one(media, {
			fields: [_pages_v_blocks_call_to_add_to_cart.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__pages_v_blocks_cta_center = relations(
	_pages_v_blocks_cta_center,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_cta_center._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_cta-center',
		}),
		background: one(media, {
			fields: [_pages_v_blocks_cta_center.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations__pages_v_blocks_cta_left = relations(
	_pages_v_blocks_cta_left,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_cta_left._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_cta-left',
		}),
		background: one(media, {
			fields: [_pages_v_blocks_cta_left.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations__pages_v_blocks_cta_right_gallery = relations(
	_pages_v_blocks_cta_right_gallery,
	({ one }) => ({
		_parentID: one(_pages_v_blocks_cta_right, {
			fields: [_pages_v_blocks_cta_right_gallery._parentID],
			references: [_pages_v_blocks_cta_right.id],
			relationName: 'gallery',
		}),
		image: one(media, {
			fields: [_pages_v_blocks_cta_right_gallery.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__pages_v_blocks_cta_right = relations(
	_pages_v_blocks_cta_right,
	({ one, many }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_cta_right._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_cta-right',
		}),
		gallery: many(_pages_v_blocks_cta_right_gallery, {
			relationName: 'gallery',
		}),
	}),
)
export const relations__pages_v_blocks_call_to_action_post = relations(
	_pages_v_blocks_call_to_action_post,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_call_to_action_post._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_call-to-action-post',
		}),
		post: one(posts, {
			fields: [_pages_v_blocks_call_to_action_post.post],
			references: [posts.id],
			relationName: 'post',
		}),
	}),
)
export const relations__pages_v_blocks_certificates_organizations = relations(
	_pages_v_blocks_certificates_organizations,
	({ one }) => ({
		_parentID: one(_pages_v_blocks_certificates, {
			fields: [_pages_v_blocks_certificates_organizations._parentID],
			references: [_pages_v_blocks_certificates.id],
			relationName: 'organizations',
		}),
		logo: one(media, {
			fields: [_pages_v_blocks_certificates_organizations.logo],
			references: [media.id],
			relationName: 'logo',
		}),
	}),
)
export const relations__pages_v_blocks_certificates = relations(
	_pages_v_blocks_certificates,
	({ one, many }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_certificates._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_certificates',
		}),
		organizations: many(_pages_v_blocks_certificates_organizations, {
			relationName: 'organizations',
		}),
	}),
)
export const relations__pages_v_blocks_content_columns = relations(
	_pages_v_blocks_content_columns,
	({ one }) => ({
		_parentID: one(_pages_v_blocks_content, {
			fields: [_pages_v_blocks_content_columns._parentID],
			references: [_pages_v_blocks_content.id],
			relationName: 'columns',
		}),
	}),
)
export const relations__pages_v_blocks_content = relations(
	_pages_v_blocks_content,
	({ one, many }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_content._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_content',
		}),
		columns: many(_pages_v_blocks_content_columns, {
			relationName: 'columns',
		}),
	}),
)
export const relations__pages_v_blocks_form_block = relations(
	_pages_v_blocks_form_block,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_form_block._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_formBlock',
		}),
		form: one(forms, {
			fields: [_pages_v_blocks_form_block.form],
			references: [forms.id],
			relationName: 'form',
		}),
	}),
)
export const relations__pages_v_blocks_highlight_center = relations(
	_pages_v_blocks_highlight_center,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_highlight_center._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_highlight-center',
		}),
		image: one(media, {
			fields: [_pages_v_blocks_highlight_center.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__pages_v_blocks_highlight_left = relations(
	_pages_v_blocks_highlight_left,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_highlight_left._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_highlight-left',
		}),
		image: one(media, {
			fields: [_pages_v_blocks_highlight_left.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__pages_v_blocks_highlight_right = relations(
	_pages_v_blocks_highlight_right,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_highlight_right._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_highlight-right',
		}),
		image: one(media, {
			fields: [_pages_v_blocks_highlight_right.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__pages_v_blocks_infinite_scroll = relations(
	_pages_v_blocks_infinite_scroll,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_infinite_scroll._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_infiniteScroll',
		}),
		graphic: one(media, {
			fields: [_pages_v_blocks_infinite_scroll.graphic],
			references: [media.id],
			relationName: 'graphic',
		}),
	}),
)
export const relations__pages_v_blocks_latest_posts = relations(
	_pages_v_blocks_latest_posts,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_latest_posts._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_latestPosts',
		}),
	}),
)
export const relations__pages_v_blocks_media = relations(_pages_v_blocks_media, ({ one }) => ({
	_parentID: one(_pages_v, {
		fields: [_pages_v_blocks_media._parentID],
		references: [_pages_v.id],
		relationName: '_blocks_media',
	}),
	media: one(media, {
		fields: [_pages_v_blocks_media.media],
		references: [media.id],
		relationName: 'media',
	}),
}))
export const relations__pages_v_blocks_posts_grid = relations(
	_pages_v_blocks_posts_grid,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_posts_grid._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_posts-grid',
		}),
	}),
)
export const relations__pages_v_blocks_products_carousel = relations(
	_pages_v_blocks_products_carousel,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_products_carousel._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_productsCarousel',
		}),
	}),
)
export const relations__pages_v_blocks_products_category_products = relations(
	_pages_v_blocks_products_category_products,
	({ one }) => ({
		_parentID: one(_pages_v_blocks_products_category, {
			fields: [_pages_v_blocks_products_category_products._parentID],
			references: [_pages_v_blocks_products_category.id],
			relationName: 'products',
		}),
		product: one(products, {
			fields: [_pages_v_blocks_products_category_products.product],
			references: [products.id],
			relationName: 'product',
		}),
	}),
)
export const relations__pages_v_blocks_products_category = relations(
	_pages_v_blocks_products_category,
	({ one, many }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_products_category._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_productsCategory',
		}),
		products: many(_pages_v_blocks_products_category_products, {
			relationName: 'products',
		}),
	}),
)
export const relations__pages_v_blocks_three_photo = relations(
	_pages_v_blocks_three_photo,
	({ one }) => ({
		_parentID: one(_pages_v, {
			fields: [_pages_v_blocks_three_photo._parentID],
			references: [_pages_v.id],
			relationName: '_blocks_threePhoto',
		}),
		photoLeft: one(media, {
			fields: [_pages_v_blocks_three_photo.photoLeft],
			references: [media.id],
			relationName: 'photoLeft',
		}),
		photoCenter: one(media, {
			fields: [_pages_v_blocks_three_photo.photoCenter],
			references: [media.id],
			relationName: 'photoCenter',
		}),
		photoRight: one(media, {
			fields: [_pages_v_blocks_three_photo.photoRight],
			references: [media.id],
			relationName: 'photoRight',
		}),
	}),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
	parent: one(_pages_v, {
		fields: [_pages_v_rels.parent],
		references: [_pages_v.id],
		relationName: '_rels',
	}),
	pagesID: one(pages, {
		fields: [_pages_v_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	postsID: one(posts, {
		fields: [_pages_v_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
	postCategoriesID: one(post_categories, {
		fields: [_pages_v_rels.postCategoriesID],
		references: [post_categories.id],
		relationName: 'postCategories',
	}),
	productsID: one(products, {
		fields: [_pages_v_rels.productsID],
		references: [products.id],
		relationName: 'products',
	}),
	productCategoriesID: one(product_categories, {
		fields: [_pages_v_rels.productCategoriesID],
		references: [product_categories.id],
		relationName: 'productCategories',
	}),
	productSubCategoriesID: one(product_sub_categories, {
		fields: [_pages_v_rels.productSubCategoriesID],
		references: [product_sub_categories.id],
		relationName: 'productSubCategories',
	}),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
	parent: one(pages, {
		fields: [_pages_v.parent],
		references: [pages.id],
		relationName: 'parent',
	}),
	version_hero_links: many(_pages_v_version_hero_links, {
		relationName: 'version_hero_links',
	}),
	version_hero_media: one(media, {
		fields: [_pages_v.version_hero_media],
		references: [media.id],
		relationName: 'version_hero_media',
	}),
	_blocks_archive: many(_pages_v_blocks_archive, {
		relationName: '_blocks_archive',
	}),
	_blocks_banner: many(_pages_v_blocks_banner, {
		relationName: '_blocks_banner',
	}),
	_blocks_bestSeller: many(_pages_v_blocks_best_seller, {
		relationName: '_blocks_bestSeller',
	}),
	'_blocks_buy-now': many(_pages_v_blocks_buy_now, {
		relationName: '_blocks_buy-now',
	}),
	'_blocks_call-to-add-to-cart': many(_pages_v_blocks_call_to_add_to_cart, {
		relationName: '_blocks_call-to-add-to-cart',
	}),
	'_blocks_cta-center': many(_pages_v_blocks_cta_center, {
		relationName: '_blocks_cta-center',
	}),
	'_blocks_cta-left': many(_pages_v_blocks_cta_left, {
		relationName: '_blocks_cta-left',
	}),
	'_blocks_cta-right': many(_pages_v_blocks_cta_right, {
		relationName: '_blocks_cta-right',
	}),
	'_blocks_call-to-action-post': many(_pages_v_blocks_call_to_action_post, {
		relationName: '_blocks_call-to-action-post',
	}),
	_blocks_certificates: many(_pages_v_blocks_certificates, {
		relationName: '_blocks_certificates',
	}),
	_blocks_content: many(_pages_v_blocks_content, {
		relationName: '_blocks_content',
	}),
	_blocks_formBlock: many(_pages_v_blocks_form_block, {
		relationName: '_blocks_formBlock',
	}),
	'_blocks_highlight-center': many(_pages_v_blocks_highlight_center, {
		relationName: '_blocks_highlight-center',
	}),
	'_blocks_highlight-left': many(_pages_v_blocks_highlight_left, {
		relationName: '_blocks_highlight-left',
	}),
	'_blocks_highlight-right': many(_pages_v_blocks_highlight_right, {
		relationName: '_blocks_highlight-right',
	}),
	_blocks_infiniteScroll: many(_pages_v_blocks_infinite_scroll, {
		relationName: '_blocks_infiniteScroll',
	}),
	_blocks_latestPosts: many(_pages_v_blocks_latest_posts, {
		relationName: '_blocks_latestPosts',
	}),
	_blocks_media: many(_pages_v_blocks_media, {
		relationName: '_blocks_media',
	}),
	'_blocks_posts-grid': many(_pages_v_blocks_posts_grid, {
		relationName: '_blocks_posts-grid',
	}),
	_blocks_productsCarousel: many(_pages_v_blocks_products_carousel, {
		relationName: '_blocks_productsCarousel',
	}),
	_blocks_productsCategory: many(_pages_v_blocks_products_category, {
		relationName: '_blocks_productsCategory',
	}),
	_blocks_threePhoto: many(_pages_v_blocks_three_photo, {
		relationName: '_blocks_threePhoto',
	}),
	version_meta_meta_image: one(media, {
		fields: [_pages_v.version_meta_meta_image],
		references: [media.id],
		relationName: 'version_meta_meta_image',
	}),
	_rels: many(_pages_v_rels, {
		relationName: '_rels',
	}),
}))
export const relations_posts_blocks_archive = relations(posts_blocks_archive, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_archive._parentID],
		references: [posts.id],
		relationName: '_blocks_archive',
	}),
}))
export const relations_posts_blocks_buy_now = relations(posts_blocks_buy_now, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_buy_now._parentID],
		references: [posts.id],
		relationName: '_blocks_buy-now',
	}),
}))
export const relations_posts_blocks_call_to_add_to_cart = relations(
	posts_blocks_call_to_add_to_cart,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_call_to_add_to_cart._parentID],
			references: [posts.id],
			relationName: '_blocks_call-to-add-to-cart',
		}),
		image: one(media, {
			fields: [posts_blocks_call_to_add_to_cart.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_posts_blocks_cta_center = relations(posts_blocks_cta_center, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_cta_center._parentID],
		references: [posts.id],
		relationName: '_blocks_cta-center',
	}),
	background: one(media, {
		fields: [posts_blocks_cta_center.background],
		references: [media.id],
		relationName: 'background',
	}),
}))
export const relations_posts_blocks_cta_left = relations(posts_blocks_cta_left, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_cta_left._parentID],
		references: [posts.id],
		relationName: '_blocks_cta-left',
	}),
	background: one(media, {
		fields: [posts_blocks_cta_left.background],
		references: [media.id],
		relationName: 'background',
	}),
}))
export const relations_posts_blocks_cta_right_gallery = relations(
	posts_blocks_cta_right_gallery,
	({ one }) => ({
		_parentID: one(posts_blocks_cta_right, {
			fields: [posts_blocks_cta_right_gallery._parentID],
			references: [posts_blocks_cta_right.id],
			relationName: 'gallery',
		}),
		image: one(media, {
			fields: [posts_blocks_cta_right_gallery.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_posts_blocks_cta_right = relations(
	posts_blocks_cta_right,
	({ one, many }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_cta_right._parentID],
			references: [posts.id],
			relationName: '_blocks_cta-right',
		}),
		gallery: many(posts_blocks_cta_right_gallery, {
			relationName: 'gallery',
		}),
	}),
)
export const relations_posts_blocks_certificates_organizations = relations(
	posts_blocks_certificates_organizations,
	({ one }) => ({
		_parentID: one(posts_blocks_certificates, {
			fields: [posts_blocks_certificates_organizations._parentID],
			references: [posts_blocks_certificates.id],
			relationName: 'organizations',
		}),
		logo: one(media, {
			fields: [posts_blocks_certificates_organizations.logo],
			references: [media.id],
			relationName: 'logo',
		}),
	}),
)
export const relations_posts_blocks_certificates = relations(
	posts_blocks_certificates,
	({ one, many }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_certificates._parentID],
			references: [posts.id],
			relationName: '_blocks_certificates',
		}),
		organizations: many(posts_blocks_certificates_organizations, {
			relationName: 'organizations',
		}),
	}),
)
export const relations_posts_blocks_content_columns = relations(
	posts_blocks_content_columns,
	({ one }) => ({
		_parentID: one(posts_blocks_content, {
			fields: [posts_blocks_content_columns._parentID],
			references: [posts_blocks_content.id],
			relationName: 'columns',
		}),
	}),
)
export const relations_posts_blocks_content = relations(posts_blocks_content, ({ one, many }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_content._parentID],
		references: [posts.id],
		relationName: '_blocks_content',
	}),
	columns: many(posts_blocks_content_columns, {
		relationName: 'columns',
	}),
}))
export const relations_posts_blocks_form_block = relations(posts_blocks_form_block, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_form_block._parentID],
		references: [posts.id],
		relationName: '_blocks_formBlock',
	}),
	form: one(forms, {
		fields: [posts_blocks_form_block.form],
		references: [forms.id],
		relationName: 'form',
	}),
}))
export const relations_posts_blocks_highlight_center = relations(
	posts_blocks_highlight_center,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_highlight_center._parentID],
			references: [posts.id],
			relationName: '_blocks_highlight-center',
		}),
		image: one(media, {
			fields: [posts_blocks_highlight_center.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_posts_blocks_highlight_left = relations(
	posts_blocks_highlight_left,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_highlight_left._parentID],
			references: [posts.id],
			relationName: '_blocks_highlight-left',
		}),
		image: one(media, {
			fields: [posts_blocks_highlight_left.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_posts_blocks_highlight_right = relations(
	posts_blocks_highlight_right,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_highlight_right._parentID],
			references: [posts.id],
			relationName: '_blocks_highlight-right',
		}),
		image: one(media, {
			fields: [posts_blocks_highlight_right.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_posts_blocks_infinite_scroll = relations(
	posts_blocks_infinite_scroll,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_infinite_scroll._parentID],
			references: [posts.id],
			relationName: '_blocks_infiniteScroll',
		}),
		graphic: one(media, {
			fields: [posts_blocks_infinite_scroll.graphic],
			references: [media.id],
			relationName: 'graphic',
		}),
	}),
)
export const relations_posts_blocks_media = relations(posts_blocks_media, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_blocks_media._parentID],
		references: [posts.id],
		relationName: '_blocks_media',
	}),
	media: one(media, {
		fields: [posts_blocks_media.media],
		references: [media.id],
		relationName: 'media',
	}),
}))
export const relations_posts_blocks_products_carousel = relations(
	posts_blocks_products_carousel,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_products_carousel._parentID],
			references: [posts.id],
			relationName: '_blocks_productsCarousel',
		}),
	}),
)
export const relations_posts_blocks_three_photo = relations(
	posts_blocks_three_photo,
	({ one }) => ({
		_parentID: one(posts, {
			fields: [posts_blocks_three_photo._parentID],
			references: [posts.id],
			relationName: '_blocks_threePhoto',
		}),
		photoLeft: one(media, {
			fields: [posts_blocks_three_photo.photoLeft],
			references: [media.id],
			relationName: 'photoLeft',
		}),
		photoCenter: one(media, {
			fields: [posts_blocks_three_photo.photoCenter],
			references: [media.id],
			relationName: 'photoCenter',
		}),
		photoRight: one(media, {
			fields: [posts_blocks_three_photo.photoRight],
			references: [media.id],
			relationName: 'photoRight',
		}),
	}),
)
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
	_parentID: one(posts, {
		fields: [posts_populated_authors._parentID],
		references: [posts.id],
		relationName: 'populatedAuthors',
	}),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
	parent: one(posts, {
		fields: [posts_rels.parent],
		references: [posts.id],
		relationName: '_rels',
	}),
	postCategoriesID: one(post_categories, {
		fields: [posts_rels.postCategoriesID],
		references: [post_categories.id],
		relationName: 'postCategories',
	}),
	postsID: one(posts, {
		fields: [posts_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
	pagesID: one(pages, {
		fields: [posts_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	productsID: one(products, {
		fields: [posts_rels.productsID],
		references: [products.id],
		relationName: 'products',
	}),
	usersID: one(users, {
		fields: [posts_rels.usersID],
		references: [users.id],
		relationName: 'users',
	}),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
	heroImage: one(media, {
		fields: [posts.heroImage],
		references: [media.id],
		relationName: 'heroImage',
	}),
	_blocks_archive: many(posts_blocks_archive, {
		relationName: '_blocks_archive',
	}),
	'_blocks_buy-now': many(posts_blocks_buy_now, {
		relationName: '_blocks_buy-now',
	}),
	'_blocks_call-to-add-to-cart': many(posts_blocks_call_to_add_to_cart, {
		relationName: '_blocks_call-to-add-to-cart',
	}),
	'_blocks_cta-center': many(posts_blocks_cta_center, {
		relationName: '_blocks_cta-center',
	}),
	'_blocks_cta-left': many(posts_blocks_cta_left, {
		relationName: '_blocks_cta-left',
	}),
	'_blocks_cta-right': many(posts_blocks_cta_right, {
		relationName: '_blocks_cta-right',
	}),
	_blocks_certificates: many(posts_blocks_certificates, {
		relationName: '_blocks_certificates',
	}),
	_blocks_content: many(posts_blocks_content, {
		relationName: '_blocks_content',
	}),
	_blocks_formBlock: many(posts_blocks_form_block, {
		relationName: '_blocks_formBlock',
	}),
	'_blocks_highlight-center': many(posts_blocks_highlight_center, {
		relationName: '_blocks_highlight-center',
	}),
	'_blocks_highlight-left': many(posts_blocks_highlight_left, {
		relationName: '_blocks_highlight-left',
	}),
	'_blocks_highlight-right': many(posts_blocks_highlight_right, {
		relationName: '_blocks_highlight-right',
	}),
	_blocks_infiniteScroll: many(posts_blocks_infinite_scroll, {
		relationName: '_blocks_infiniteScroll',
	}),
	_blocks_media: many(posts_blocks_media, {
		relationName: '_blocks_media',
	}),
	_blocks_productsCarousel: many(posts_blocks_products_carousel, {
		relationName: '_blocks_productsCarousel',
	}),
	_blocks_threePhoto: many(posts_blocks_three_photo, {
		relationName: '_blocks_threePhoto',
	}),
	meta_image: one(media, {
		fields: [posts.meta_image],
		references: [media.id],
		relationName: 'meta_image',
	}),
	populatedAuthors: many(posts_populated_authors, {
		relationName: 'populatedAuthors',
	}),
	_rels: many(posts_rels, {
		relationName: '_rels',
	}),
}))
export const relations__posts_v_blocks_archive = relations(_posts_v_blocks_archive, ({ one }) => ({
	_parentID: one(_posts_v, {
		fields: [_posts_v_blocks_archive._parentID],
		references: [_posts_v.id],
		relationName: '_blocks_archive',
	}),
}))
export const relations__posts_v_blocks_buy_now = relations(_posts_v_blocks_buy_now, ({ one }) => ({
	_parentID: one(_posts_v, {
		fields: [_posts_v_blocks_buy_now._parentID],
		references: [_posts_v.id],
		relationName: '_blocks_buy-now',
	}),
}))
export const relations__posts_v_blocks_call_to_add_to_cart = relations(
	_posts_v_blocks_call_to_add_to_cart,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_call_to_add_to_cart._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_call-to-add-to-cart',
		}),
		image: one(media, {
			fields: [_posts_v_blocks_call_to_add_to_cart.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__posts_v_blocks_cta_center = relations(
	_posts_v_blocks_cta_center,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_cta_center._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_cta-center',
		}),
		background: one(media, {
			fields: [_posts_v_blocks_cta_center.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations__posts_v_blocks_cta_left = relations(
	_posts_v_blocks_cta_left,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_cta_left._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_cta-left',
		}),
		background: one(media, {
			fields: [_posts_v_blocks_cta_left.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations__posts_v_blocks_cta_right_gallery = relations(
	_posts_v_blocks_cta_right_gallery,
	({ one }) => ({
		_parentID: one(_posts_v_blocks_cta_right, {
			fields: [_posts_v_blocks_cta_right_gallery._parentID],
			references: [_posts_v_blocks_cta_right.id],
			relationName: 'gallery',
		}),
		image: one(media, {
			fields: [_posts_v_blocks_cta_right_gallery.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__posts_v_blocks_cta_right = relations(
	_posts_v_blocks_cta_right,
	({ one, many }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_cta_right._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_cta-right',
		}),
		gallery: many(_posts_v_blocks_cta_right_gallery, {
			relationName: 'gallery',
		}),
	}),
)
export const relations__posts_v_blocks_certificates_organizations = relations(
	_posts_v_blocks_certificates_organizations,
	({ one }) => ({
		_parentID: one(_posts_v_blocks_certificates, {
			fields: [_posts_v_blocks_certificates_organizations._parentID],
			references: [_posts_v_blocks_certificates.id],
			relationName: 'organizations',
		}),
		logo: one(media, {
			fields: [_posts_v_blocks_certificates_organizations.logo],
			references: [media.id],
			relationName: 'logo',
		}),
	}),
)
export const relations__posts_v_blocks_certificates = relations(
	_posts_v_blocks_certificates,
	({ one, many }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_certificates._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_certificates',
		}),
		organizations: many(_posts_v_blocks_certificates_organizations, {
			relationName: 'organizations',
		}),
	}),
)
export const relations__posts_v_blocks_content_columns = relations(
	_posts_v_blocks_content_columns,
	({ one }) => ({
		_parentID: one(_posts_v_blocks_content, {
			fields: [_posts_v_blocks_content_columns._parentID],
			references: [_posts_v_blocks_content.id],
			relationName: 'columns',
		}),
	}),
)
export const relations__posts_v_blocks_content = relations(
	_posts_v_blocks_content,
	({ one, many }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_content._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_content',
		}),
		columns: many(_posts_v_blocks_content_columns, {
			relationName: 'columns',
		}),
	}),
)
export const relations__posts_v_blocks_form_block = relations(
	_posts_v_blocks_form_block,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_form_block._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_formBlock',
		}),
		form: one(forms, {
			fields: [_posts_v_blocks_form_block.form],
			references: [forms.id],
			relationName: 'form',
		}),
	}),
)
export const relations__posts_v_blocks_highlight_center = relations(
	_posts_v_blocks_highlight_center,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_highlight_center._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_highlight-center',
		}),
		image: one(media, {
			fields: [_posts_v_blocks_highlight_center.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__posts_v_blocks_highlight_left = relations(
	_posts_v_blocks_highlight_left,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_highlight_left._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_highlight-left',
		}),
		image: one(media, {
			fields: [_posts_v_blocks_highlight_left.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__posts_v_blocks_highlight_right = relations(
	_posts_v_blocks_highlight_right,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_highlight_right._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_highlight-right',
		}),
		image: one(media, {
			fields: [_posts_v_blocks_highlight_right.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations__posts_v_blocks_infinite_scroll = relations(
	_posts_v_blocks_infinite_scroll,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_infinite_scroll._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_infiniteScroll',
		}),
		graphic: one(media, {
			fields: [_posts_v_blocks_infinite_scroll.graphic],
			references: [media.id],
			relationName: 'graphic',
		}),
	}),
)
export const relations__posts_v_blocks_media = relations(_posts_v_blocks_media, ({ one }) => ({
	_parentID: one(_posts_v, {
		fields: [_posts_v_blocks_media._parentID],
		references: [_posts_v.id],
		relationName: '_blocks_media',
	}),
	media: one(media, {
		fields: [_posts_v_blocks_media.media],
		references: [media.id],
		relationName: 'media',
	}),
}))
export const relations__posts_v_blocks_products_carousel = relations(
	_posts_v_blocks_products_carousel,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_products_carousel._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_productsCarousel',
		}),
	}),
)
export const relations__posts_v_blocks_three_photo = relations(
	_posts_v_blocks_three_photo,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_blocks_three_photo._parentID],
			references: [_posts_v.id],
			relationName: '_blocks_threePhoto',
		}),
		photoLeft: one(media, {
			fields: [_posts_v_blocks_three_photo.photoLeft],
			references: [media.id],
			relationName: 'photoLeft',
		}),
		photoCenter: one(media, {
			fields: [_posts_v_blocks_three_photo.photoCenter],
			references: [media.id],
			relationName: 'photoCenter',
		}),
		photoRight: one(media, {
			fields: [_posts_v_blocks_three_photo.photoRight],
			references: [media.id],
			relationName: 'photoRight',
		}),
	}),
)
export const relations__posts_v_version_populated_authors = relations(
	_posts_v_version_populated_authors,
	({ one }) => ({
		_parentID: one(_posts_v, {
			fields: [_posts_v_version_populated_authors._parentID],
			references: [_posts_v.id],
			relationName: 'version_populatedAuthors',
		}),
	}),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
	parent: one(_posts_v, {
		fields: [_posts_v_rels.parent],
		references: [_posts_v.id],
		relationName: '_rels',
	}),
	postCategoriesID: one(post_categories, {
		fields: [_posts_v_rels.postCategoriesID],
		references: [post_categories.id],
		relationName: 'postCategories',
	}),
	postsID: one(posts, {
		fields: [_posts_v_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
	pagesID: one(pages, {
		fields: [_posts_v_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	productsID: one(products, {
		fields: [_posts_v_rels.productsID],
		references: [products.id],
		relationName: 'products',
	}),
	usersID: one(users, {
		fields: [_posts_v_rels.usersID],
		references: [users.id],
		relationName: 'users',
	}),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
	parent: one(posts, {
		fields: [_posts_v.parent],
		references: [posts.id],
		relationName: 'parent',
	}),
	version_heroImage: one(media, {
		fields: [_posts_v.version_heroImage],
		references: [media.id],
		relationName: 'version_heroImage',
	}),
	_blocks_archive: many(_posts_v_blocks_archive, {
		relationName: '_blocks_archive',
	}),
	'_blocks_buy-now': many(_posts_v_blocks_buy_now, {
		relationName: '_blocks_buy-now',
	}),
	'_blocks_call-to-add-to-cart': many(_posts_v_blocks_call_to_add_to_cart, {
		relationName: '_blocks_call-to-add-to-cart',
	}),
	'_blocks_cta-center': many(_posts_v_blocks_cta_center, {
		relationName: '_blocks_cta-center',
	}),
	'_blocks_cta-left': many(_posts_v_blocks_cta_left, {
		relationName: '_blocks_cta-left',
	}),
	'_blocks_cta-right': many(_posts_v_blocks_cta_right, {
		relationName: '_blocks_cta-right',
	}),
	_blocks_certificates: many(_posts_v_blocks_certificates, {
		relationName: '_blocks_certificates',
	}),
	_blocks_content: many(_posts_v_blocks_content, {
		relationName: '_blocks_content',
	}),
	_blocks_formBlock: many(_posts_v_blocks_form_block, {
		relationName: '_blocks_formBlock',
	}),
	'_blocks_highlight-center': many(_posts_v_blocks_highlight_center, {
		relationName: '_blocks_highlight-center',
	}),
	'_blocks_highlight-left': many(_posts_v_blocks_highlight_left, {
		relationName: '_blocks_highlight-left',
	}),
	'_blocks_highlight-right': many(_posts_v_blocks_highlight_right, {
		relationName: '_blocks_highlight-right',
	}),
	_blocks_infiniteScroll: many(_posts_v_blocks_infinite_scroll, {
		relationName: '_blocks_infiniteScroll',
	}),
	_blocks_media: many(_posts_v_blocks_media, {
		relationName: '_blocks_media',
	}),
	_blocks_productsCarousel: many(_posts_v_blocks_products_carousel, {
		relationName: '_blocks_productsCarousel',
	}),
	_blocks_threePhoto: many(_posts_v_blocks_three_photo, {
		relationName: '_blocks_threePhoto',
	}),
	version_meta_image: one(media, {
		fields: [_posts_v.version_meta_image],
		references: [media.id],
		relationName: 'version_meta_image',
	}),
	version_populatedAuthors: many(_posts_v_version_populated_authors, {
		relationName: 'version_populatedAuthors',
	}),
	_rels: many(_posts_v_rels, {
		relationName: '_rels',
	}),
}))
export const relations_media = relations(media, () => ({}))
export const relations_post_categories_breadcrumbs = relations(
	post_categories_breadcrumbs,
	({ one }) => ({
		_parentID: one(post_categories, {
			fields: [post_categories_breadcrumbs._parentID],
			references: [post_categories.id],
			relationName: 'breadcrumbs',
		}),
		doc: one(post_categories, {
			fields: [post_categories_breadcrumbs.doc],
			references: [post_categories.id],
			relationName: 'doc',
		}),
	}),
)
export const relations_post_categories = relations(post_categories, ({ one, many }) => ({
	parent: one(post_categories, {
		fields: [post_categories.parent],
		references: [post_categories.id],
		relationName: 'parent',
	}),
	breadcrumbs: many(post_categories_breadcrumbs, {
		relationName: 'breadcrumbs',
	}),
}))
export const relations_users = relations(users, () => ({}))
export const relations_products_blocks_archive = relations(products_blocks_archive, ({ one }) => ({
	_parentID: one(products, {
		fields: [products_blocks_archive._parentID],
		references: [products.id],
		relationName: '_blocks_archive',
	}),
}))
export const relations_products_blocks_buy_now = relations(products_blocks_buy_now, ({ one }) => ({
	_parentID: one(products, {
		fields: [products_blocks_buy_now._parentID],
		references: [products.id],
		relationName: '_blocks_buy-now',
	}),
}))
export const relations_products_blocks_call_to_add_to_cart = relations(
	products_blocks_call_to_add_to_cart,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_call_to_add_to_cart._parentID],
			references: [products.id],
			relationName: '_blocks_call-to-add-to-cart',
		}),
		image: one(media, {
			fields: [products_blocks_call_to_add_to_cart.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_products_blocks_cta_center = relations(
	products_blocks_cta_center,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_cta_center._parentID],
			references: [products.id],
			relationName: '_blocks_cta-center',
		}),
		background: one(media, {
			fields: [products_blocks_cta_center.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations_products_blocks_cta_left = relations(
	products_blocks_cta_left,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_cta_left._parentID],
			references: [products.id],
			relationName: '_blocks_cta-left',
		}),
		background: one(media, {
			fields: [products_blocks_cta_left.background],
			references: [media.id],
			relationName: 'background',
		}),
	}),
)
export const relations_products_blocks_cta_right_gallery = relations(
	products_blocks_cta_right_gallery,
	({ one }) => ({
		_parentID: one(products_blocks_cta_right, {
			fields: [products_blocks_cta_right_gallery._parentID],
			references: [products_blocks_cta_right.id],
			relationName: 'gallery',
		}),
		image: one(media, {
			fields: [products_blocks_cta_right_gallery.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_products_blocks_cta_right = relations(
	products_blocks_cta_right,
	({ one, many }) => ({
		_parentID: one(products, {
			fields: [products_blocks_cta_right._parentID],
			references: [products.id],
			relationName: '_blocks_cta-right',
		}),
		gallery: many(products_blocks_cta_right_gallery, {
			relationName: 'gallery',
		}),
	}),
)
export const relations_products_blocks_certificates_organizations = relations(
	products_blocks_certificates_organizations,
	({ one }) => ({
		_parentID: one(products_blocks_certificates, {
			fields: [products_blocks_certificates_organizations._parentID],
			references: [products_blocks_certificates.id],
			relationName: 'organizations',
		}),
		logo: one(media, {
			fields: [products_blocks_certificates_organizations.logo],
			references: [media.id],
			relationName: 'logo',
		}),
	}),
)
export const relations_products_blocks_certificates = relations(
	products_blocks_certificates,
	({ one, many }) => ({
		_parentID: one(products, {
			fields: [products_blocks_certificates._parentID],
			references: [products.id],
			relationName: '_blocks_certificates',
		}),
		organizations: many(products_blocks_certificates_organizations, {
			relationName: 'organizations',
		}),
	}),
)
export const relations_products_blocks_content_columns = relations(
	products_blocks_content_columns,
	({ one }) => ({
		_parentID: one(products_blocks_content, {
			fields: [products_blocks_content_columns._parentID],
			references: [products_blocks_content.id],
			relationName: 'columns',
		}),
	}),
)
export const relations_products_blocks_content = relations(
	products_blocks_content,
	({ one, many }) => ({
		_parentID: one(products, {
			fields: [products_blocks_content._parentID],
			references: [products.id],
			relationName: '_blocks_content',
		}),
		columns: many(products_blocks_content_columns, {
			relationName: 'columns',
		}),
	}),
)
export const relations_products_blocks_form_block = relations(
	products_blocks_form_block,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_form_block._parentID],
			references: [products.id],
			relationName: '_blocks_formBlock',
		}),
		form: one(forms, {
			fields: [products_blocks_form_block.form],
			references: [forms.id],
			relationName: 'form',
		}),
	}),
)
export const relations_products_blocks_highlight_center = relations(
	products_blocks_highlight_center,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_highlight_center._parentID],
			references: [products.id],
			relationName: '_blocks_highlight-center',
		}),
		image: one(media, {
			fields: [products_blocks_highlight_center.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_products_blocks_highlight_left = relations(
	products_blocks_highlight_left,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_highlight_left._parentID],
			references: [products.id],
			relationName: '_blocks_highlight-left',
		}),
		image: one(media, {
			fields: [products_blocks_highlight_left.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_products_blocks_highlight_right = relations(
	products_blocks_highlight_right,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_highlight_right._parentID],
			references: [products.id],
			relationName: '_blocks_highlight-right',
		}),
		image: one(media, {
			fields: [products_blocks_highlight_right.image],
			references: [media.id],
			relationName: 'image',
		}),
	}),
)
export const relations_products_blocks_infinite_scroll = relations(
	products_blocks_infinite_scroll,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_infinite_scroll._parentID],
			references: [products.id],
			relationName: '_blocks_infiniteScroll',
		}),
		graphic: one(media, {
			fields: [products_blocks_infinite_scroll.graphic],
			references: [media.id],
			relationName: 'graphic',
		}),
	}),
)
export const relations_products_blocks_latest_posts = relations(
	products_blocks_latest_posts,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_latest_posts._parentID],
			references: [products.id],
			relationName: '_blocks_latestPosts',
		}),
	}),
)
export const relations_products_blocks_media = relations(products_blocks_media, ({ one }) => ({
	_parentID: one(products, {
		fields: [products_blocks_media._parentID],
		references: [products.id],
		relationName: '_blocks_media',
	}),
	media: one(media, {
		fields: [products_blocks_media.media],
		references: [media.id],
		relationName: 'media',
	}),
}))
export const relations_products_blocks_products_carousel = relations(
	products_blocks_products_carousel,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_products_carousel._parentID],
			references: [products.id],
			relationName: '_blocks_productsCarousel',
		}),
	}),
)
export const relations_products_blocks_three_photo = relations(
	products_blocks_three_photo,
	({ one }) => ({
		_parentID: one(products, {
			fields: [products_blocks_three_photo._parentID],
			references: [products.id],
			relationName: '_blocks_threePhoto',
		}),
		photoLeft: one(media, {
			fields: [products_blocks_three_photo.photoLeft],
			references: [media.id],
			relationName: 'photoLeft',
		}),
		photoCenter: one(media, {
			fields: [products_blocks_three_photo.photoCenter],
			references: [media.id],
			relationName: 'photoCenter',
		}),
		photoRight: one(media, {
			fields: [products_blocks_three_photo.photoRight],
			references: [media.id],
			relationName: 'photoRight',
		}),
	}),
)
export const relations_products_rels = relations(products_rels, ({ one }) => ({
	parent: one(products, {
		fields: [products_rels.parent],
		references: [products.id],
		relationName: '_rels',
	}),
	postCategoriesID: one(post_categories, {
		fields: [products_rels.postCategoriesID],
		references: [post_categories.id],
		relationName: 'postCategories',
	}),
	productSubCategoriesID: one(product_sub_categories, {
		fields: [products_rels.productSubCategoriesID],
		references: [product_sub_categories.id],
		relationName: 'productSubCategories',
	}),
	mediaID: one(media, {
		fields: [products_rels.mediaID],
		references: [media.id],
		relationName: 'media',
	}),
	postsID: one(posts, {
		fields: [products_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
	pagesID: one(pages, {
		fields: [products_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	productsID: one(products, {
		fields: [products_rels.productsID],
		references: [products.id],
		relationName: 'products',
	}),
}))
export const relations_products = relations(products, ({ one, many }) => ({
	heroMedia: one(media, {
		fields: [products.heroMedia],
		references: [media.id],
		relationName: 'heroMedia',
	}),
	_blocks_archive: many(products_blocks_archive, {
		relationName: '_blocks_archive',
	}),
	'_blocks_buy-now': many(products_blocks_buy_now, {
		relationName: '_blocks_buy-now',
	}),
	'_blocks_call-to-add-to-cart': many(products_blocks_call_to_add_to_cart, {
		relationName: '_blocks_call-to-add-to-cart',
	}),
	'_blocks_cta-center': many(products_blocks_cta_center, {
		relationName: '_blocks_cta-center',
	}),
	'_blocks_cta-left': many(products_blocks_cta_left, {
		relationName: '_blocks_cta-left',
	}),
	'_blocks_cta-right': many(products_blocks_cta_right, {
		relationName: '_blocks_cta-right',
	}),
	_blocks_certificates: many(products_blocks_certificates, {
		relationName: '_blocks_certificates',
	}),
	_blocks_content: many(products_blocks_content, {
		relationName: '_blocks_content',
	}),
	_blocks_formBlock: many(products_blocks_form_block, {
		relationName: '_blocks_formBlock',
	}),
	'_blocks_highlight-center': many(products_blocks_highlight_center, {
		relationName: '_blocks_highlight-center',
	}),
	'_blocks_highlight-left': many(products_blocks_highlight_left, {
		relationName: '_blocks_highlight-left',
	}),
	'_blocks_highlight-right': many(products_blocks_highlight_right, {
		relationName: '_blocks_highlight-right',
	}),
	_blocks_infiniteScroll: many(products_blocks_infinite_scroll, {
		relationName: '_blocks_infiniteScroll',
	}),
	_blocks_latestPosts: many(products_blocks_latest_posts, {
		relationName: '_blocks_latestPosts',
	}),
	_blocks_media: many(products_blocks_media, {
		relationName: '_blocks_media',
	}),
	_blocks_productsCarousel: many(products_blocks_products_carousel, {
		relationName: '_blocks_productsCarousel',
	}),
	_blocks_threePhoto: many(products_blocks_three_photo, {
		relationName: '_blocks_threePhoto',
	}),
	meta_image: one(media, {
		fields: [products.meta_image],
		references: [media.id],
		relationName: 'meta_image',
	}),
	_rels: many(products_rels, {
		relationName: '_rels',
	}),
}))
export const relations_product_categories = relations(product_categories, () => ({}))
export const relations_product_sub_categories = relations(product_sub_categories, ({ one }) => ({
	category: one(product_categories, {
		fields: [product_sub_categories.category],
		references: [product_categories.id],
		relationName: 'category',
	}),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
	parent: one(redirects, {
		fields: [redirects_rels.parent],
		references: [redirects.id],
		relationName: '_rels',
	}),
	pagesID: one(pages, {
		fields: [redirects_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	postsID: one(posts, {
		fields: [redirects_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
	_rels: many(redirects_rels, {
		relationName: '_rels',
	}),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_checkbox._parentID],
		references: [forms.id],
		relationName: '_blocks_checkbox',
	}),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_country._parentID],
		references: [forms.id],
		relationName: '_blocks_country',
	}),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_email._parentID],
		references: [forms.id],
		relationName: '_blocks_email',
	}),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_message._parentID],
		references: [forms.id],
		relationName: '_blocks_message',
	}),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_number._parentID],
		references: [forms.id],
		relationName: '_blocks_number',
	}),
}))
export const relations_forms_blocks_select_options = relations(
	forms_blocks_select_options,
	({ one }) => ({
		_parentID: one(forms_blocks_select, {
			fields: [forms_blocks_select_options._parentID],
			references: [forms_blocks_select.id],
			relationName: 'options',
		}),
	}),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_select._parentID],
		references: [forms.id],
		relationName: '_blocks_select',
	}),
	options: many(forms_blocks_select_options, {
		relationName: 'options',
	}),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_state._parentID],
		references: [forms.id],
		relationName: '_blocks_state',
	}),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_text._parentID],
		references: [forms.id],
		relationName: '_blocks_text',
	}),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_blocks_textarea._parentID],
		references: [forms.id],
		relationName: '_blocks_textarea',
	}),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
	_parentID: one(forms, {
		fields: [forms_emails._parentID],
		references: [forms.id],
		relationName: 'emails',
	}),
}))
export const relations_forms = relations(forms, ({ many }) => ({
	_blocks_checkbox: many(forms_blocks_checkbox, {
		relationName: '_blocks_checkbox',
	}),
	_blocks_country: many(forms_blocks_country, {
		relationName: '_blocks_country',
	}),
	_blocks_email: many(forms_blocks_email, {
		relationName: '_blocks_email',
	}),
	_blocks_message: many(forms_blocks_message, {
		relationName: '_blocks_message',
	}),
	_blocks_number: many(forms_blocks_number, {
		relationName: '_blocks_number',
	}),
	_blocks_select: many(forms_blocks_select, {
		relationName: '_blocks_select',
	}),
	_blocks_state: many(forms_blocks_state, {
		relationName: '_blocks_state',
	}),
	_blocks_text: many(forms_blocks_text, {
		relationName: '_blocks_text',
	}),
	_blocks_textarea: many(forms_blocks_textarea, {
		relationName: '_blocks_textarea',
	}),
	emails: many(forms_emails, {
		relationName: 'emails',
	}),
}))
export const relations_form_submissions_submission_data = relations(
	form_submissions_submission_data,
	({ one }) => ({
		_parentID: one(form_submissions, {
			fields: [form_submissions_submission_data._parentID],
			references: [form_submissions.id],
			relationName: 'submissionData',
		}),
	}),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
	form: one(forms, {
		fields: [form_submissions.form],
		references: [forms.id],
		relationName: 'form',
	}),
	submissionData: many(form_submissions_submission_data, {
		relationName: 'submissionData',
	}),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
	_parentID: one(search, {
		fields: [search_categories._parentID],
		references: [search.id],
		relationName: 'categories',
	}),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
	parent: one(search, {
		fields: [search_rels.parent],
		references: [search.id],
		relationName: '_rels',
	}),
	postsID: one(posts, {
		fields: [search_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
}))
export const relations_search = relations(search, ({ one, many }) => ({
	meta_image: one(media, {
		fields: [search.meta_image],
		references: [media.id],
		relationName: 'meta_image',
	}),
	categories: many(search_categories, {
		relationName: 'categories',
	}),
	_rels: many(search_rels, {
		relationName: '_rels',
	}),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
	_parentID: one(payload_jobs, {
		fields: [payload_jobs_log._parentID],
		references: [payload_jobs.id],
		relationName: 'log',
	}),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
	log: many(payload_jobs_log, {
		relationName: 'log',
	}),
}))
export const relations_payload_locked_documents_rels = relations(
	payload_locked_documents_rels,
	({ one }) => ({
		parent: one(payload_locked_documents, {
			fields: [payload_locked_documents_rels.parent],
			references: [payload_locked_documents.id],
			relationName: '_rels',
		}),
		pagesID: one(pages, {
			fields: [payload_locked_documents_rels.pagesID],
			references: [pages.id],
			relationName: 'pages',
		}),
		postsID: one(posts, {
			fields: [payload_locked_documents_rels.postsID],
			references: [posts.id],
			relationName: 'posts',
		}),
		mediaID: one(media, {
			fields: [payload_locked_documents_rels.mediaID],
			references: [media.id],
			relationName: 'media',
		}),
		postCategoriesID: one(post_categories, {
			fields: [payload_locked_documents_rels.postCategoriesID],
			references: [post_categories.id],
			relationName: 'postCategories',
		}),
		usersID: one(users, {
			fields: [payload_locked_documents_rels.usersID],
			references: [users.id],
			relationName: 'users',
		}),
		productsID: one(products, {
			fields: [payload_locked_documents_rels.productsID],
			references: [products.id],
			relationName: 'products',
		}),
		productCategoriesID: one(product_categories, {
			fields: [payload_locked_documents_rels.productCategoriesID],
			references: [product_categories.id],
			relationName: 'productCategories',
		}),
		productSubCategoriesID: one(product_sub_categories, {
			fields: [payload_locked_documents_rels.productSubCategoriesID],
			references: [product_sub_categories.id],
			relationName: 'productSubCategories',
		}),
		redirectsID: one(redirects, {
			fields: [payload_locked_documents_rels.redirectsID],
			references: [redirects.id],
			relationName: 'redirects',
		}),
		formsID: one(forms, {
			fields: [payload_locked_documents_rels.formsID],
			references: [forms.id],
			relationName: 'forms',
		}),
		'form-submissionsID': one(form_submissions, {
			fields: [payload_locked_documents_rels['form-submissionsID']],
			references: [form_submissions.id],
			relationName: 'form-submissions',
		}),
		searchID: one(search, {
			fields: [payload_locked_documents_rels.searchID],
			references: [search.id],
			relationName: 'search',
		}),
		'payload-jobsID': one(payload_jobs, {
			fields: [payload_locked_documents_rels['payload-jobsID']],
			references: [payload_jobs.id],
			relationName: 'payload-jobs',
		}),
	}),
)
export const relations_payload_locked_documents = relations(
	payload_locked_documents,
	({ many }) => ({
		_rels: many(payload_locked_documents_rels, {
			relationName: '_rels',
		}),
	}),
)
export const relations_payload_preferences_rels = relations(
	payload_preferences_rels,
	({ one }) => ({
		parent: one(payload_preferences, {
			fields: [payload_preferences_rels.parent],
			references: [payload_preferences.id],
			relationName: '_rels',
		}),
		usersID: one(users, {
			fields: [payload_preferences_rels.usersID],
			references: [users.id],
			relationName: 'users',
		}),
	}),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
	_rels: many(payload_preferences_rels, {
		relationName: '_rels',
	}),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items_left = relations(header_nav_items_left, ({ one }) => ({
	_parentID: one(header, {
		fields: [header_nav_items_left._parentID],
		references: [header.id],
		relationName: 'navItemsLeft',
	}),
}))
export const relations_header_nav_items_right = relations(header_nav_items_right, ({ one }) => ({
	_parentID: one(header, {
		fields: [header_nav_items_right._parentID],
		references: [header.id],
		relationName: 'navItemsRight',
	}),
}))
export const relations_header = relations(header, ({ many }) => ({
	navItemsLeft: many(header_nav_items_left, {
		relationName: 'navItemsLeft',
	}),
	navItemsRight: many(header_nav_items_right, {
		relationName: 'navItemsRight',
	}),
}))
export const relations_footer = relations(footer, ({ one }) => ({
	image_image: one(media, {
		fields: [footer.image_image],
		references: [media.id],
		relationName: 'image_image',
	}),
	legal_stamp: one(media, {
		fields: [footer.legal_stamp],
		references: [media.id],
		relationName: 'legal_stamp',
	}),
}))
export const relations_promo_rels = relations(promo_rels, ({ one }) => ({
	parent: one(promo, {
		fields: [promo_rels.parent],
		references: [promo.id],
		relationName: '_rels',
	}),
	pagesID: one(pages, {
		fields: [promo_rels.pagesID],
		references: [pages.id],
		relationName: 'pages',
	}),
	postsID: one(posts, {
		fields: [promo_rels.postsID],
		references: [posts.id],
		relationName: 'posts',
	}),
}))
export const relations_promo = relations(promo, ({ many }) => ({
	_rels: many(promo_rels, {
		relationName: '_rels',
	}),
}))
export const relations_contact_form = relations(contact_form, () => ({}))

type DatabaseSchema = {
	enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
	enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
	enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
	enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
	enum_pages_blocks_banner_style: typeof enum_pages_blocks_banner_style
	enum_pages_blocks_cta_center_button_link_type: typeof enum_pages_blocks_cta_center_button_link_type
	enum_pages_blocks_cta_left_button_link_type: typeof enum_pages_blocks_cta_left_button_link_type
	enum_pages_blocks_cta_right_button_link_type: typeof enum_pages_blocks_cta_right_button_link_type
	enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
	enum_pages_blocks_content_columns_font: typeof enum_pages_blocks_content_columns_font
	enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
	enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
	enum_pages_hero_type: typeof enum_pages_hero_type
	enum_pages_status: typeof enum_pages_status
	enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
	enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
	enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
	enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
	enum__pages_v_blocks_banner_style: typeof enum__pages_v_blocks_banner_style
	enum__pages_v_blocks_cta_center_button_link_type: typeof enum__pages_v_blocks_cta_center_button_link_type
	enum__pages_v_blocks_cta_left_button_link_type: typeof enum__pages_v_blocks_cta_left_button_link_type
	enum__pages_v_blocks_cta_right_button_link_type: typeof enum__pages_v_blocks_cta_right_button_link_type
	enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
	enum__pages_v_blocks_content_columns_font: typeof enum__pages_v_blocks_content_columns_font
	enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
	enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
	enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
	enum__pages_v_version_status: typeof enum__pages_v_version_status
	enum_posts_blocks_archive_populate_by: typeof enum_posts_blocks_archive_populate_by
	enum_posts_blocks_archive_relation_to: typeof enum_posts_blocks_archive_relation_to
	enum_posts_blocks_cta_center_button_link_type: typeof enum_posts_blocks_cta_center_button_link_type
	enum_posts_blocks_cta_left_button_link_type: typeof enum_posts_blocks_cta_left_button_link_type
	enum_posts_blocks_cta_right_button_link_type: typeof enum_posts_blocks_cta_right_button_link_type
	enum_posts_blocks_content_columns_size: typeof enum_posts_blocks_content_columns_size
	enum_posts_blocks_content_columns_font: typeof enum_posts_blocks_content_columns_font
	enum_posts_blocks_content_columns_link_type: typeof enum_posts_blocks_content_columns_link_type
	enum_posts_blocks_content_columns_link_appearance: typeof enum_posts_blocks_content_columns_link_appearance
	enum_posts_status: typeof enum_posts_status
	enum__posts_v_blocks_archive_populate_by: typeof enum__posts_v_blocks_archive_populate_by
	enum__posts_v_blocks_archive_relation_to: typeof enum__posts_v_blocks_archive_relation_to
	enum__posts_v_blocks_cta_center_button_link_type: typeof enum__posts_v_blocks_cta_center_button_link_type
	enum__posts_v_blocks_cta_left_button_link_type: typeof enum__posts_v_blocks_cta_left_button_link_type
	enum__posts_v_blocks_cta_right_button_link_type: typeof enum__posts_v_blocks_cta_right_button_link_type
	enum__posts_v_blocks_content_columns_size: typeof enum__posts_v_blocks_content_columns_size
	enum__posts_v_blocks_content_columns_font: typeof enum__posts_v_blocks_content_columns_font
	enum__posts_v_blocks_content_columns_link_type: typeof enum__posts_v_blocks_content_columns_link_type
	enum__posts_v_blocks_content_columns_link_appearance: typeof enum__posts_v_blocks_content_columns_link_appearance
	enum__posts_v_version_status: typeof enum__posts_v_version_status
	enum_users_role: typeof enum_users_role
	enum_products_blocks_archive_populate_by: typeof enum_products_blocks_archive_populate_by
	enum_products_blocks_archive_relation_to: typeof enum_products_blocks_archive_relation_to
	enum_products_blocks_cta_center_button_link_type: typeof enum_products_blocks_cta_center_button_link_type
	enum_products_blocks_cta_left_button_link_type: typeof enum_products_blocks_cta_left_button_link_type
	enum_products_blocks_cta_right_button_link_type: typeof enum_products_blocks_cta_right_button_link_type
	enum_products_blocks_content_columns_size: typeof enum_products_blocks_content_columns_size
	enum_products_blocks_content_columns_font: typeof enum_products_blocks_content_columns_font
	enum_products_blocks_content_columns_link_type: typeof enum_products_blocks_content_columns_link_type
	enum_products_blocks_content_columns_link_appearance: typeof enum_products_blocks_content_columns_link_appearance
	enum_redirects_to_type: typeof enum_redirects_to_type
	enum_forms_confirmation_type: typeof enum_forms_confirmation_type
	enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
	enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
	enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
	enum_header_nav_items_left_item: typeof enum_header_nav_items_left_item
	enum_header_nav_items_right_item: typeof enum_header_nav_items_right_item
	enum_promo_link_type: typeof enum_promo_link_type
	pages_hero_links: typeof pages_hero_links
	pages_blocks_archive: typeof pages_blocks_archive
	pages_blocks_banner: typeof pages_blocks_banner
	pages_blocks_best_seller: typeof pages_blocks_best_seller
	pages_blocks_buy_now: typeof pages_blocks_buy_now
	pages_blocks_call_to_add_to_cart: typeof pages_blocks_call_to_add_to_cart
	pages_blocks_cta_center: typeof pages_blocks_cta_center
	pages_blocks_cta_left: typeof pages_blocks_cta_left
	pages_blocks_cta_right_gallery: typeof pages_blocks_cta_right_gallery
	pages_blocks_cta_right: typeof pages_blocks_cta_right
	pages_blocks_call_to_action_post: typeof pages_blocks_call_to_action_post
	pages_blocks_certificates_organizations: typeof pages_blocks_certificates_organizations
	pages_blocks_certificates: typeof pages_blocks_certificates
	pages_blocks_content_columns: typeof pages_blocks_content_columns
	pages_blocks_content: typeof pages_blocks_content
	pages_blocks_form_block: typeof pages_blocks_form_block
	pages_blocks_highlight_center: typeof pages_blocks_highlight_center
	pages_blocks_highlight_left: typeof pages_blocks_highlight_left
	pages_blocks_highlight_right: typeof pages_blocks_highlight_right
	pages_blocks_infinite_scroll: typeof pages_blocks_infinite_scroll
	pages_blocks_latest_posts: typeof pages_blocks_latest_posts
	pages_blocks_media: typeof pages_blocks_media
	pages_blocks_posts_grid: typeof pages_blocks_posts_grid
	pages_blocks_products_carousel: typeof pages_blocks_products_carousel
	pages_blocks_products_category_products: typeof pages_blocks_products_category_products
	pages_blocks_products_category: typeof pages_blocks_products_category
	pages_blocks_three_photo: typeof pages_blocks_three_photo
	pages: typeof pages
	pages_rels: typeof pages_rels
	_pages_v_version_hero_links: typeof _pages_v_version_hero_links
	_pages_v_blocks_archive: typeof _pages_v_blocks_archive
	_pages_v_blocks_banner: typeof _pages_v_blocks_banner
	_pages_v_blocks_best_seller: typeof _pages_v_blocks_best_seller
	_pages_v_blocks_buy_now: typeof _pages_v_blocks_buy_now
	_pages_v_blocks_call_to_add_to_cart: typeof _pages_v_blocks_call_to_add_to_cart
	_pages_v_blocks_cta_center: typeof _pages_v_blocks_cta_center
	_pages_v_blocks_cta_left: typeof _pages_v_blocks_cta_left
	_pages_v_blocks_cta_right_gallery: typeof _pages_v_blocks_cta_right_gallery
	_pages_v_blocks_cta_right: typeof _pages_v_blocks_cta_right
	_pages_v_blocks_call_to_action_post: typeof _pages_v_blocks_call_to_action_post
	_pages_v_blocks_certificates_organizations: typeof _pages_v_blocks_certificates_organizations
	_pages_v_blocks_certificates: typeof _pages_v_blocks_certificates
	_pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
	_pages_v_blocks_content: typeof _pages_v_blocks_content
	_pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
	_pages_v_blocks_highlight_center: typeof _pages_v_blocks_highlight_center
	_pages_v_blocks_highlight_left: typeof _pages_v_blocks_highlight_left
	_pages_v_blocks_highlight_right: typeof _pages_v_blocks_highlight_right
	_pages_v_blocks_infinite_scroll: typeof _pages_v_blocks_infinite_scroll
	_pages_v_blocks_latest_posts: typeof _pages_v_blocks_latest_posts
	_pages_v_blocks_media: typeof _pages_v_blocks_media
	_pages_v_blocks_posts_grid: typeof _pages_v_blocks_posts_grid
	_pages_v_blocks_products_carousel: typeof _pages_v_blocks_products_carousel
	_pages_v_blocks_products_category_products: typeof _pages_v_blocks_products_category_products
	_pages_v_blocks_products_category: typeof _pages_v_blocks_products_category
	_pages_v_blocks_three_photo: typeof _pages_v_blocks_three_photo
	_pages_v: typeof _pages_v
	_pages_v_rels: typeof _pages_v_rels
	posts_blocks_archive: typeof posts_blocks_archive
	posts_blocks_buy_now: typeof posts_blocks_buy_now
	posts_blocks_call_to_add_to_cart: typeof posts_blocks_call_to_add_to_cart
	posts_blocks_cta_center: typeof posts_blocks_cta_center
	posts_blocks_cta_left: typeof posts_blocks_cta_left
	posts_blocks_cta_right_gallery: typeof posts_blocks_cta_right_gallery
	posts_blocks_cta_right: typeof posts_blocks_cta_right
	posts_blocks_certificates_organizations: typeof posts_blocks_certificates_organizations
	posts_blocks_certificates: typeof posts_blocks_certificates
	posts_blocks_content_columns: typeof posts_blocks_content_columns
	posts_blocks_content: typeof posts_blocks_content
	posts_blocks_form_block: typeof posts_blocks_form_block
	posts_blocks_highlight_center: typeof posts_blocks_highlight_center
	posts_blocks_highlight_left: typeof posts_blocks_highlight_left
	posts_blocks_highlight_right: typeof posts_blocks_highlight_right
	posts_blocks_infinite_scroll: typeof posts_blocks_infinite_scroll
	posts_blocks_media: typeof posts_blocks_media
	posts_blocks_products_carousel: typeof posts_blocks_products_carousel
	posts_blocks_three_photo: typeof posts_blocks_three_photo
	posts_populated_authors: typeof posts_populated_authors
	posts: typeof posts
	posts_rels: typeof posts_rels
	_posts_v_blocks_archive: typeof _posts_v_blocks_archive
	_posts_v_blocks_buy_now: typeof _posts_v_blocks_buy_now
	_posts_v_blocks_call_to_add_to_cart: typeof _posts_v_blocks_call_to_add_to_cart
	_posts_v_blocks_cta_center: typeof _posts_v_blocks_cta_center
	_posts_v_blocks_cta_left: typeof _posts_v_blocks_cta_left
	_posts_v_blocks_cta_right_gallery: typeof _posts_v_blocks_cta_right_gallery
	_posts_v_blocks_cta_right: typeof _posts_v_blocks_cta_right
	_posts_v_blocks_certificates_organizations: typeof _posts_v_blocks_certificates_organizations
	_posts_v_blocks_certificates: typeof _posts_v_blocks_certificates
	_posts_v_blocks_content_columns: typeof _posts_v_blocks_content_columns
	_posts_v_blocks_content: typeof _posts_v_blocks_content
	_posts_v_blocks_form_block: typeof _posts_v_blocks_form_block
	_posts_v_blocks_highlight_center: typeof _posts_v_blocks_highlight_center
	_posts_v_blocks_highlight_left: typeof _posts_v_blocks_highlight_left
	_posts_v_blocks_highlight_right: typeof _posts_v_blocks_highlight_right
	_posts_v_blocks_infinite_scroll: typeof _posts_v_blocks_infinite_scroll
	_posts_v_blocks_media: typeof _posts_v_blocks_media
	_posts_v_blocks_products_carousel: typeof _posts_v_blocks_products_carousel
	_posts_v_blocks_three_photo: typeof _posts_v_blocks_three_photo
	_posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
	_posts_v: typeof _posts_v
	_posts_v_rels: typeof _posts_v_rels
	media: typeof media
	post_categories_breadcrumbs: typeof post_categories_breadcrumbs
	post_categories: typeof post_categories
	users: typeof users
	products_blocks_archive: typeof products_blocks_archive
	products_blocks_buy_now: typeof products_blocks_buy_now
	products_blocks_call_to_add_to_cart: typeof products_blocks_call_to_add_to_cart
	products_blocks_cta_center: typeof products_blocks_cta_center
	products_blocks_cta_left: typeof products_blocks_cta_left
	products_blocks_cta_right_gallery: typeof products_blocks_cta_right_gallery
	products_blocks_cta_right: typeof products_blocks_cta_right
	products_blocks_certificates_organizations: typeof products_blocks_certificates_organizations
	products_blocks_certificates: typeof products_blocks_certificates
	products_blocks_content_columns: typeof products_blocks_content_columns
	products_blocks_content: typeof products_blocks_content
	products_blocks_form_block: typeof products_blocks_form_block
	products_blocks_highlight_center: typeof products_blocks_highlight_center
	products_blocks_highlight_left: typeof products_blocks_highlight_left
	products_blocks_highlight_right: typeof products_blocks_highlight_right
	products_blocks_infinite_scroll: typeof products_blocks_infinite_scroll
	products_blocks_latest_posts: typeof products_blocks_latest_posts
	products_blocks_media: typeof products_blocks_media
	products_blocks_products_carousel: typeof products_blocks_products_carousel
	products_blocks_three_photo: typeof products_blocks_three_photo
	products: typeof products
	products_rels: typeof products_rels
	product_categories: typeof product_categories
	product_sub_categories: typeof product_sub_categories
	redirects: typeof redirects
	redirects_rels: typeof redirects_rels
	forms_blocks_checkbox: typeof forms_blocks_checkbox
	forms_blocks_country: typeof forms_blocks_country
	forms_blocks_email: typeof forms_blocks_email
	forms_blocks_message: typeof forms_blocks_message
	forms_blocks_number: typeof forms_blocks_number
	forms_blocks_select_options: typeof forms_blocks_select_options
	forms_blocks_select: typeof forms_blocks_select
	forms_blocks_state: typeof forms_blocks_state
	forms_blocks_text: typeof forms_blocks_text
	forms_blocks_textarea: typeof forms_blocks_textarea
	forms_emails: typeof forms_emails
	forms: typeof forms
	form_submissions_submission_data: typeof form_submissions_submission_data
	form_submissions: typeof form_submissions
	search_categories: typeof search_categories
	search: typeof search
	search_rels: typeof search_rels
	payload_jobs_log: typeof payload_jobs_log
	payload_jobs: typeof payload_jobs
	payload_locked_documents: typeof payload_locked_documents
	payload_locked_documents_rels: typeof payload_locked_documents_rels
	payload_preferences: typeof payload_preferences
	payload_preferences_rels: typeof payload_preferences_rels
	payload_migrations: typeof payload_migrations
	header_nav_items_left: typeof header_nav_items_left
	header_nav_items_right: typeof header_nav_items_right
	header: typeof header
	footer: typeof footer
	promo: typeof promo
	promo_rels: typeof promo_rels
	contact_form: typeof contact_form
	relations_pages_hero_links: typeof relations_pages_hero_links
	relations_pages_blocks_archive: typeof relations_pages_blocks_archive
	relations_pages_blocks_banner: typeof relations_pages_blocks_banner
	relations_pages_blocks_best_seller: typeof relations_pages_blocks_best_seller
	relations_pages_blocks_buy_now: typeof relations_pages_blocks_buy_now
	relations_pages_blocks_call_to_add_to_cart: typeof relations_pages_blocks_call_to_add_to_cart
	relations_pages_blocks_cta_center: typeof relations_pages_blocks_cta_center
	relations_pages_blocks_cta_left: typeof relations_pages_blocks_cta_left
	relations_pages_blocks_cta_right_gallery: typeof relations_pages_blocks_cta_right_gallery
	relations_pages_blocks_cta_right: typeof relations_pages_blocks_cta_right
	relations_pages_blocks_call_to_action_post: typeof relations_pages_blocks_call_to_action_post
	relations_pages_blocks_certificates_organizations: typeof relations_pages_blocks_certificates_organizations
	relations_pages_blocks_certificates: typeof relations_pages_blocks_certificates
	relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
	relations_pages_blocks_content: typeof relations_pages_blocks_content
	relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
	relations_pages_blocks_highlight_center: typeof relations_pages_blocks_highlight_center
	relations_pages_blocks_highlight_left: typeof relations_pages_blocks_highlight_left
	relations_pages_blocks_highlight_right: typeof relations_pages_blocks_highlight_right
	relations_pages_blocks_infinite_scroll: typeof relations_pages_blocks_infinite_scroll
	relations_pages_blocks_latest_posts: typeof relations_pages_blocks_latest_posts
	relations_pages_blocks_media: typeof relations_pages_blocks_media
	relations_pages_blocks_posts_grid: typeof relations_pages_blocks_posts_grid
	relations_pages_blocks_products_carousel: typeof relations_pages_blocks_products_carousel
	relations_pages_blocks_products_category_products: typeof relations_pages_blocks_products_category_products
	relations_pages_blocks_products_category: typeof relations_pages_blocks_products_category
	relations_pages_blocks_three_photo: typeof relations_pages_blocks_three_photo
	relations_pages_rels: typeof relations_pages_rels
	relations_pages: typeof relations_pages
	relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
	relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
	relations__pages_v_blocks_banner: typeof relations__pages_v_blocks_banner
	relations__pages_v_blocks_best_seller: typeof relations__pages_v_blocks_best_seller
	relations__pages_v_blocks_buy_now: typeof relations__pages_v_blocks_buy_now
	relations__pages_v_blocks_call_to_add_to_cart: typeof relations__pages_v_blocks_call_to_add_to_cart
	relations__pages_v_blocks_cta_center: typeof relations__pages_v_blocks_cta_center
	relations__pages_v_blocks_cta_left: typeof relations__pages_v_blocks_cta_left
	relations__pages_v_blocks_cta_right_gallery: typeof relations__pages_v_blocks_cta_right_gallery
	relations__pages_v_blocks_cta_right: typeof relations__pages_v_blocks_cta_right
	relations__pages_v_blocks_call_to_action_post: typeof relations__pages_v_blocks_call_to_action_post
	relations__pages_v_blocks_certificates_organizations: typeof relations__pages_v_blocks_certificates_organizations
	relations__pages_v_blocks_certificates: typeof relations__pages_v_blocks_certificates
	relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
	relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
	relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
	relations__pages_v_blocks_highlight_center: typeof relations__pages_v_blocks_highlight_center
	relations__pages_v_blocks_highlight_left: typeof relations__pages_v_blocks_highlight_left
	relations__pages_v_blocks_highlight_right: typeof relations__pages_v_blocks_highlight_right
	relations__pages_v_blocks_infinite_scroll: typeof relations__pages_v_blocks_infinite_scroll
	relations__pages_v_blocks_latest_posts: typeof relations__pages_v_blocks_latest_posts
	relations__pages_v_blocks_media: typeof relations__pages_v_blocks_media
	relations__pages_v_blocks_posts_grid: typeof relations__pages_v_blocks_posts_grid
	relations__pages_v_blocks_products_carousel: typeof relations__pages_v_blocks_products_carousel
	relations__pages_v_blocks_products_category_products: typeof relations__pages_v_blocks_products_category_products
	relations__pages_v_blocks_products_category: typeof relations__pages_v_blocks_products_category
	relations__pages_v_blocks_three_photo: typeof relations__pages_v_blocks_three_photo
	relations__pages_v_rels: typeof relations__pages_v_rels
	relations__pages_v: typeof relations__pages_v
	relations_posts_blocks_archive: typeof relations_posts_blocks_archive
	relations_posts_blocks_buy_now: typeof relations_posts_blocks_buy_now
	relations_posts_blocks_call_to_add_to_cart: typeof relations_posts_blocks_call_to_add_to_cart
	relations_posts_blocks_cta_center: typeof relations_posts_blocks_cta_center
	relations_posts_blocks_cta_left: typeof relations_posts_blocks_cta_left
	relations_posts_blocks_cta_right_gallery: typeof relations_posts_blocks_cta_right_gallery
	relations_posts_blocks_cta_right: typeof relations_posts_blocks_cta_right
	relations_posts_blocks_certificates_organizations: typeof relations_posts_blocks_certificates_organizations
	relations_posts_blocks_certificates: typeof relations_posts_blocks_certificates
	relations_posts_blocks_content_columns: typeof relations_posts_blocks_content_columns
	relations_posts_blocks_content: typeof relations_posts_blocks_content
	relations_posts_blocks_form_block: typeof relations_posts_blocks_form_block
	relations_posts_blocks_highlight_center: typeof relations_posts_blocks_highlight_center
	relations_posts_blocks_highlight_left: typeof relations_posts_blocks_highlight_left
	relations_posts_blocks_highlight_right: typeof relations_posts_blocks_highlight_right
	relations_posts_blocks_infinite_scroll: typeof relations_posts_blocks_infinite_scroll
	relations_posts_blocks_media: typeof relations_posts_blocks_media
	relations_posts_blocks_products_carousel: typeof relations_posts_blocks_products_carousel
	relations_posts_blocks_three_photo: typeof relations_posts_blocks_three_photo
	relations_posts_populated_authors: typeof relations_posts_populated_authors
	relations_posts_rels: typeof relations_posts_rels
	relations_posts: typeof relations_posts
	relations__posts_v_blocks_archive: typeof relations__posts_v_blocks_archive
	relations__posts_v_blocks_buy_now: typeof relations__posts_v_blocks_buy_now
	relations__posts_v_blocks_call_to_add_to_cart: typeof relations__posts_v_blocks_call_to_add_to_cart
	relations__posts_v_blocks_cta_center: typeof relations__posts_v_blocks_cta_center
	relations__posts_v_blocks_cta_left: typeof relations__posts_v_blocks_cta_left
	relations__posts_v_blocks_cta_right_gallery: typeof relations__posts_v_blocks_cta_right_gallery
	relations__posts_v_blocks_cta_right: typeof relations__posts_v_blocks_cta_right
	relations__posts_v_blocks_certificates_organizations: typeof relations__posts_v_blocks_certificates_organizations
	relations__posts_v_blocks_certificates: typeof relations__posts_v_blocks_certificates
	relations__posts_v_blocks_content_columns: typeof relations__posts_v_blocks_content_columns
	relations__posts_v_blocks_content: typeof relations__posts_v_blocks_content
	relations__posts_v_blocks_form_block: typeof relations__posts_v_blocks_form_block
	relations__posts_v_blocks_highlight_center: typeof relations__posts_v_blocks_highlight_center
	relations__posts_v_blocks_highlight_left: typeof relations__posts_v_blocks_highlight_left
	relations__posts_v_blocks_highlight_right: typeof relations__posts_v_blocks_highlight_right
	relations__posts_v_blocks_infinite_scroll: typeof relations__posts_v_blocks_infinite_scroll
	relations__posts_v_blocks_media: typeof relations__posts_v_blocks_media
	relations__posts_v_blocks_products_carousel: typeof relations__posts_v_blocks_products_carousel
	relations__posts_v_blocks_three_photo: typeof relations__posts_v_blocks_three_photo
	relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
	relations__posts_v_rels: typeof relations__posts_v_rels
	relations__posts_v: typeof relations__posts_v
	relations_media: typeof relations_media
	relations_post_categories_breadcrumbs: typeof relations_post_categories_breadcrumbs
	relations_post_categories: typeof relations_post_categories
	relations_users: typeof relations_users
	relations_products_blocks_archive: typeof relations_products_blocks_archive
	relations_products_blocks_buy_now: typeof relations_products_blocks_buy_now
	relations_products_blocks_call_to_add_to_cart: typeof relations_products_blocks_call_to_add_to_cart
	relations_products_blocks_cta_center: typeof relations_products_blocks_cta_center
	relations_products_blocks_cta_left: typeof relations_products_blocks_cta_left
	relations_products_blocks_cta_right_gallery: typeof relations_products_blocks_cta_right_gallery
	relations_products_blocks_cta_right: typeof relations_products_blocks_cta_right
	relations_products_blocks_certificates_organizations: typeof relations_products_blocks_certificates_organizations
	relations_products_blocks_certificates: typeof relations_products_blocks_certificates
	relations_products_blocks_content_columns: typeof relations_products_blocks_content_columns
	relations_products_blocks_content: typeof relations_products_blocks_content
	relations_products_blocks_form_block: typeof relations_products_blocks_form_block
	relations_products_blocks_highlight_center: typeof relations_products_blocks_highlight_center
	relations_products_blocks_highlight_left: typeof relations_products_blocks_highlight_left
	relations_products_blocks_highlight_right: typeof relations_products_blocks_highlight_right
	relations_products_blocks_infinite_scroll: typeof relations_products_blocks_infinite_scroll
	relations_products_blocks_latest_posts: typeof relations_products_blocks_latest_posts
	relations_products_blocks_media: typeof relations_products_blocks_media
	relations_products_blocks_products_carousel: typeof relations_products_blocks_products_carousel
	relations_products_blocks_three_photo: typeof relations_products_blocks_three_photo
	relations_products_rels: typeof relations_products_rels
	relations_products: typeof relations_products
	relations_product_categories: typeof relations_product_categories
	relations_product_sub_categories: typeof relations_product_sub_categories
	relations_redirects_rels: typeof relations_redirects_rels
	relations_redirects: typeof relations_redirects
	relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
	relations_forms_blocks_country: typeof relations_forms_blocks_country
	relations_forms_blocks_email: typeof relations_forms_blocks_email
	relations_forms_blocks_message: typeof relations_forms_blocks_message
	relations_forms_blocks_number: typeof relations_forms_blocks_number
	relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
	relations_forms_blocks_select: typeof relations_forms_blocks_select
	relations_forms_blocks_state: typeof relations_forms_blocks_state
	relations_forms_blocks_text: typeof relations_forms_blocks_text
	relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
	relations_forms_emails: typeof relations_forms_emails
	relations_forms: typeof relations_forms
	relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
	relations_form_submissions: typeof relations_form_submissions
	relations_search_categories: typeof relations_search_categories
	relations_search_rels: typeof relations_search_rels
	relations_search: typeof relations_search
	relations_payload_jobs_log: typeof relations_payload_jobs_log
	relations_payload_jobs: typeof relations_payload_jobs
	relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
	relations_payload_locked_documents: typeof relations_payload_locked_documents
	relations_payload_preferences_rels: typeof relations_payload_preferences_rels
	relations_payload_preferences: typeof relations_payload_preferences
	relations_payload_migrations: typeof relations_payload_migrations
	relations_header_nav_items_left: typeof relations_header_nav_items_left
	relations_header_nav_items_right: typeof relations_header_nav_items_right
	relations_header: typeof relations_header
	relations_footer: typeof relations_footer
	relations_promo_rels: typeof relations_promo_rels
	relations_promo: typeof relations_promo
	relations_contact_form: typeof relations_contact_form
}

declare module '@payloadcms/db-postgres' {
	export interface GeneratedDatabaseSchema {
		schema: DatabaseSchema
	}
}
